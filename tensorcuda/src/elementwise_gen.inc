
#include <string>
#include <cstdint>

#include <cuda_runtime.h>

#include <libgpuc_cuda.hpp>
        
template<typename O, typename I1, typename I2>
__global__ void add2(O* out, const I1* in1, const I2* in2, uint64_t n);
        
template<typename O, typename I1, typename I2>
__global__ void sub2(O* out, const I1* in1, const I2* in2, uint64_t n);
        
template<typename O, typename I1, typename I2>
__global__ void mul2(O* out, const I1* in1, const I2* in2, uint64_t n);
        
template<typename O, typename I1, typename I2>
__global__ void div2(O* out, const I1* in1, const I2* in2, uint64_t n);
        
template<typename O, typename I>
__global__ void cast(O* out, const I* in, uint64_t n);
        
extern const char* setupElementwiseKernel(libtcCudaStream& stream, uint64_t n, cudaLaunchConfig_t& config);

#ifdef __cplusplus
extern "C" {

extern const char* libtcCudaAdd2_f64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n);       
extern const char* libtcCudaCast_f64_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n);
#endif

const char* libtcCudaAdd2_f64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, float>, (double*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, int64_t>, (double*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, int32_t>, (double*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, int16_t>, (double*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, int8_t>, (double*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, uint64_t>, (double*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, uint32_t>, (double*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, uint16_t>, (double*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, double, uint8_t>, (double*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, double>, (double*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, float>, (double*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, int64_t>, (double*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, int32_t>, (double*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, int16_t>, (double*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, int8_t>, (double*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, uint64_t>, (double*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, uint32_t>, (double*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, uint16_t>, (double*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, float, uint8_t>, (double*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, double>, (double*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, float>, (double*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, int64_t>, (double*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, int32_t>, (double*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, int16_t>, (double*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, int8_t>, (double*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, uint64_t>, (double*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, uint32_t>, (double*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, uint16_t>, (double*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int64_t, uint8_t>, (double*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, double>, (double*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, float>, (double*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, int64_t>, (double*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, int32_t>, (double*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, int16_t>, (double*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, int8_t>, (double*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, uint64_t>, (double*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, uint32_t>, (double*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, uint16_t>, (double*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int32_t, uint8_t>, (double*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, double>, (double*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, float>, (double*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, int64_t>, (double*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, int32_t>, (double*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, int16_t>, (double*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, int8_t>, (double*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, uint64_t>, (double*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, uint32_t>, (double*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, uint16_t>, (double*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int16_t, uint8_t>, (double*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, double>, (double*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, float>, (double*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, int64_t>, (double*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, int32_t>, (double*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, int16_t>, (double*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, int8_t>, (double*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, uint64_t>, (double*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, uint32_t>, (double*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, uint16_t>, (double*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, int8_t, uint8_t>, (double*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, double>, (double*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, float>, (double*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, int64_t>, (double*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, int32_t>, (double*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, int16_t>, (double*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, int8_t>, (double*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, uint64_t>, (double*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, uint32_t>, (double*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, uint16_t>, (double*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint64_t, uint8_t>, (double*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, double>, (double*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, float>, (double*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, int64_t>, (double*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, int32_t>, (double*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, int16_t>, (double*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, int8_t>, (double*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, uint64_t>, (double*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, uint32_t>, (double*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, uint16_t>, (double*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint32_t, uint8_t>, (double*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, double>, (double*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, float>, (double*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, int64_t>, (double*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, int32_t>, (double*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, int16_t>, (double*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, int8_t>, (double*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, uint64_t>, (double*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, uint32_t>, (double*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, uint16_t>, (double*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint16_t, uint8_t>, (double*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, double>, (double*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, float>, (double*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, int64_t>, (double*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, int32_t>, (double*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, int16_t>, (double*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, int8_t>, (double*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, uint64_t>, (double*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, uint32_t>, (double*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, uint16_t>, (double*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<double, uint8_t, uint8_t>, (double*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, double>, (float*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, float>, (float*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, int64_t>, (float*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, int32_t>, (float*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, int16_t>, (float*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, int8_t>, (float*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, uint64_t>, (float*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, uint32_t>, (float*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, uint16_t>, (float*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, double, uint8_t>, (float*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, double>, (float*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, float>, (float*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, int64_t>, (float*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, int32_t>, (float*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, int16_t>, (float*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, int8_t>, (float*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, uint64_t>, (float*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, uint32_t>, (float*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, uint16_t>, (float*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, float, uint8_t>, (float*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, double>, (float*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, float>, (float*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, int64_t>, (float*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, int32_t>, (float*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, int16_t>, (float*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, int8_t>, (float*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, uint64_t>, (float*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, uint32_t>, (float*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, uint16_t>, (float*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int64_t, uint8_t>, (float*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, double>, (float*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, float>, (float*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, int64_t>, (float*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, int32_t>, (float*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, int16_t>, (float*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, int8_t>, (float*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, uint64_t>, (float*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, uint32_t>, (float*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, uint16_t>, (float*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int32_t, uint8_t>, (float*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, double>, (float*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, float>, (float*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, int64_t>, (float*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, int32_t>, (float*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, int16_t>, (float*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, int8_t>, (float*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, uint64_t>, (float*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, uint32_t>, (float*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, uint16_t>, (float*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int16_t, uint8_t>, (float*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, double>, (float*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, float>, (float*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, int64_t>, (float*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, int32_t>, (float*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, int16_t>, (float*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, int8_t>, (float*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, uint64_t>, (float*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, uint32_t>, (float*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, uint16_t>, (float*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, int8_t, uint8_t>, (float*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, double>, (float*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, float>, (float*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, int64_t>, (float*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, int32_t>, (float*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, int16_t>, (float*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, int8_t>, (float*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, uint64_t>, (float*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, uint32_t>, (float*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, uint16_t>, (float*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint64_t, uint8_t>, (float*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, double>, (float*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, float>, (float*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, int64_t>, (float*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, int32_t>, (float*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, int16_t>, (float*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, int8_t>, (float*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, uint64_t>, (float*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, uint32_t>, (float*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, uint16_t>, (float*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint32_t, uint8_t>, (float*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, double>, (float*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, float>, (float*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, int64_t>, (float*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, int32_t>, (float*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, int16_t>, (float*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, int8_t>, (float*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, uint64_t>, (float*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, uint32_t>, (float*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, uint16_t>, (float*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint16_t, uint8_t>, (float*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, double>, (float*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, float>, (float*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, int64_t>, (float*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, int32_t>, (float*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, int16_t>, (float*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, int8_t>, (float*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, uint64_t>, (float*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, uint32_t>, (float*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, uint16_t>, (float*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_f32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<float, uint8_t, uint8_t>, (float*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, double>, (int64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, float>, (int64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, int64_t>, (int64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, int32_t>, (int64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, int16_t>, (int64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, int8_t>, (int64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, uint64_t>, (int64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, uint32_t>, (int64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, uint16_t>, (int64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, double, uint8_t>, (int64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, double>, (int64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, float>, (int64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, int64_t>, (int64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, int32_t>, (int64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, int16_t>, (int64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, int8_t>, (int64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, uint64_t>, (int64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, uint32_t>, (int64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, uint16_t>, (int64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, float, uint8_t>, (int64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, double>, (int64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, float>, (int64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, int64_t>, (int64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, int32_t>, (int64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, int16_t>, (int64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, int8_t>, (int64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, uint64_t>, (int64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, uint32_t>, (int64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, uint16_t>, (int64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int64_t, uint8_t>, (int64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, double>, (int64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, float>, (int64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, int64_t>, (int64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, int32_t>, (int64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, int16_t>, (int64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, int8_t>, (int64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, uint64_t>, (int64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, uint32_t>, (int64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, uint16_t>, (int64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int32_t, uint8_t>, (int64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, double>, (int64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, float>, (int64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, int64_t>, (int64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, int32_t>, (int64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, int16_t>, (int64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, int8_t>, (int64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, uint64_t>, (int64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, uint32_t>, (int64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, uint16_t>, (int64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int16_t, uint8_t>, (int64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, double>, (int64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, float>, (int64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, int64_t>, (int64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, int32_t>, (int64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, int16_t>, (int64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, int8_t>, (int64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, uint64_t>, (int64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, uint32_t>, (int64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, uint16_t>, (int64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, int8_t, uint8_t>, (int64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, double>, (int64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, float>, (int64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, int64_t>, (int64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, int32_t>, (int64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, int16_t>, (int64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, int8_t>, (int64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, uint64_t>, (int64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, uint32_t>, (int64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, uint16_t>, (int64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint64_t, uint8_t>, (int64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, double>, (int64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, float>, (int64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, int64_t>, (int64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, int32_t>, (int64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, int16_t>, (int64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, int8_t>, (int64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, uint64_t>, (int64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, uint32_t>, (int64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, uint16_t>, (int64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint32_t, uint8_t>, (int64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, double>, (int64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, float>, (int64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, int64_t>, (int64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, int32_t>, (int64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, int16_t>, (int64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, int8_t>, (int64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, uint64_t>, (int64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, uint32_t>, (int64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, uint16_t>, (int64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint16_t, uint8_t>, (int64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, double>, (int64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, float>, (int64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, int64_t>, (int64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, int32_t>, (int64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, int16_t>, (int64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, int8_t>, (int64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, uint64_t>, (int64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, uint32_t>, (int64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, uint16_t>, (int64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int64_t, uint8_t, uint8_t>, (int64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, double>, (int32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, float>, (int32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, int64_t>, (int32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, int32_t>, (int32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, int16_t>, (int32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, int8_t>, (int32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, uint64_t>, (int32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, uint32_t>, (int32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, uint16_t>, (int32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, double, uint8_t>, (int32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, double>, (int32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, float>, (int32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, int64_t>, (int32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, int32_t>, (int32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, int16_t>, (int32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, int8_t>, (int32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, uint64_t>, (int32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, uint32_t>, (int32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, uint16_t>, (int32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, float, uint8_t>, (int32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, double>, (int32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, float>, (int32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, int64_t>, (int32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, int32_t>, (int32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, int16_t>, (int32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, int8_t>, (int32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, uint64_t>, (int32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, uint32_t>, (int32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, uint16_t>, (int32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int64_t, uint8_t>, (int32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, double>, (int32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, float>, (int32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, int64_t>, (int32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, int32_t>, (int32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, int16_t>, (int32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, int8_t>, (int32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, uint64_t>, (int32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, uint32_t>, (int32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, uint16_t>, (int32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int32_t, uint8_t>, (int32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, double>, (int32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, float>, (int32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, int64_t>, (int32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, int32_t>, (int32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, int16_t>, (int32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, int8_t>, (int32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, uint64_t>, (int32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, uint32_t>, (int32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, uint16_t>, (int32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int16_t, uint8_t>, (int32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, double>, (int32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, float>, (int32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, int64_t>, (int32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, int32_t>, (int32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, int16_t>, (int32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, int8_t>, (int32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, uint64_t>, (int32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, uint32_t>, (int32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, uint16_t>, (int32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, int8_t, uint8_t>, (int32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, double>, (int32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, float>, (int32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, int64_t>, (int32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, int32_t>, (int32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, int16_t>, (int32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, int8_t>, (int32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, uint64_t>, (int32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, uint32_t>, (int32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, uint16_t>, (int32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint64_t, uint8_t>, (int32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, double>, (int32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, float>, (int32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, int64_t>, (int32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, int32_t>, (int32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, int16_t>, (int32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, int8_t>, (int32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, uint64_t>, (int32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, uint32_t>, (int32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, uint16_t>, (int32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint32_t, uint8_t>, (int32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, double>, (int32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, float>, (int32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, int64_t>, (int32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, int32_t>, (int32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, int16_t>, (int32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, int8_t>, (int32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, uint64_t>, (int32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, uint32_t>, (int32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, uint16_t>, (int32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint16_t, uint8_t>, (int32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, double>, (int32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, float>, (int32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, int64_t>, (int32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, int32_t>, (int32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, int16_t>, (int32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, int8_t>, (int32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, uint64_t>, (int32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, uint32_t>, (int32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, uint16_t>, (int32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int32_t, uint8_t, uint8_t>, (int32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, double>, (int16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, float>, (int16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, int64_t>, (int16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, int32_t>, (int16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, int16_t>, (int16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, int8_t>, (int16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, uint64_t>, (int16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, uint32_t>, (int16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, uint16_t>, (int16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, double, uint8_t>, (int16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, double>, (int16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, float>, (int16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, int64_t>, (int16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, int32_t>, (int16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, int16_t>, (int16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, int8_t>, (int16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, uint64_t>, (int16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, uint32_t>, (int16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, uint16_t>, (int16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, float, uint8_t>, (int16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, double>, (int16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, float>, (int16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, int64_t>, (int16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, int32_t>, (int16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, int16_t>, (int16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, int8_t>, (int16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, uint64_t>, (int16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, uint32_t>, (int16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, uint16_t>, (int16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int64_t, uint8_t>, (int16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, double>, (int16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, float>, (int16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, int64_t>, (int16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, int32_t>, (int16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, int16_t>, (int16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, int8_t>, (int16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, uint64_t>, (int16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, uint32_t>, (int16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, uint16_t>, (int16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int32_t, uint8_t>, (int16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, double>, (int16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, float>, (int16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, int64_t>, (int16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, int32_t>, (int16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, int16_t>, (int16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, int8_t>, (int16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, uint64_t>, (int16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, uint32_t>, (int16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, uint16_t>, (int16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int16_t, uint8_t>, (int16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, double>, (int16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, float>, (int16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, int64_t>, (int16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, int32_t>, (int16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, int16_t>, (int16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, int8_t>, (int16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, uint64_t>, (int16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, uint32_t>, (int16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, uint16_t>, (int16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, int8_t, uint8_t>, (int16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, double>, (int16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, float>, (int16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, int64_t>, (int16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, int32_t>, (int16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, int16_t>, (int16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, int8_t>, (int16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, uint64_t>, (int16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, uint32_t>, (int16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, uint16_t>, (int16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint64_t, uint8_t>, (int16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, double>, (int16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, float>, (int16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, int64_t>, (int16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, int32_t>, (int16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, int16_t>, (int16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, int8_t>, (int16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, uint64_t>, (int16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, uint32_t>, (int16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, uint16_t>, (int16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint32_t, uint8_t>, (int16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, double>, (int16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, float>, (int16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, int64_t>, (int16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, int32_t>, (int16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, int16_t>, (int16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, int8_t>, (int16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, uint64_t>, (int16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, uint32_t>, (int16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, uint16_t>, (int16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint16_t, uint8_t>, (int16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, double>, (int16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, float>, (int16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, int64_t>, (int16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, int32_t>, (int16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, int16_t>, (int16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, int8_t>, (int16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, uint64_t>, (int16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, uint32_t>, (int16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, uint16_t>, (int16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int16_t, uint8_t, uint8_t>, (int16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, double>, (int8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, float>, (int8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, int64_t>, (int8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, int32_t>, (int8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, int16_t>, (int8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, int8_t>, (int8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, uint64_t>, (int8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, uint32_t>, (int8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, uint16_t>, (int8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, double, uint8_t>, (int8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, double>, (int8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, float>, (int8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, int64_t>, (int8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, int32_t>, (int8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, int16_t>, (int8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, int8_t>, (int8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, uint64_t>, (int8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, uint32_t>, (int8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, uint16_t>, (int8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, float, uint8_t>, (int8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, double>, (int8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, float>, (int8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, int64_t>, (int8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, int32_t>, (int8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, int16_t>, (int8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, int8_t>, (int8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, uint64_t>, (int8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, uint32_t>, (int8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, uint16_t>, (int8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int64_t, uint8_t>, (int8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, double>, (int8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, float>, (int8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, int64_t>, (int8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, int32_t>, (int8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, int16_t>, (int8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, int8_t>, (int8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, uint64_t>, (int8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, uint32_t>, (int8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, uint16_t>, (int8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int32_t, uint8_t>, (int8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, double>, (int8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, float>, (int8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, int64_t>, (int8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, int32_t>, (int8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, int16_t>, (int8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, int8_t>, (int8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, uint64_t>, (int8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, uint32_t>, (int8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, uint16_t>, (int8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int16_t, uint8_t>, (int8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, double>, (int8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, float>, (int8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, int64_t>, (int8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, int32_t>, (int8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, int16_t>, (int8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, int8_t>, (int8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, uint64_t>, (int8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, uint32_t>, (int8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, uint16_t>, (int8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, int8_t, uint8_t>, (int8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, double>, (int8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, float>, (int8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, int64_t>, (int8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, int32_t>, (int8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, int16_t>, (int8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, int8_t>, (int8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, uint64_t>, (int8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, uint32_t>, (int8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, uint16_t>, (int8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint64_t, uint8_t>, (int8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, double>, (int8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, float>, (int8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, int64_t>, (int8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, int32_t>, (int8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, int16_t>, (int8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, int8_t>, (int8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, uint64_t>, (int8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, uint32_t>, (int8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, uint16_t>, (int8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint32_t, uint8_t>, (int8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, double>, (int8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, float>, (int8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, int64_t>, (int8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, int32_t>, (int8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, int16_t>, (int8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, int8_t>, (int8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, uint64_t>, (int8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, uint32_t>, (int8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, uint16_t>, (int8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint16_t, uint8_t>, (int8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, double>, (int8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, float>, (int8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, int64_t>, (int8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, int32_t>, (int8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, int16_t>, (int8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, int8_t>, (int8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, uint64_t>, (int8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, uint32_t>, (int8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, uint16_t>, (int8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_i8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<int8_t, uint8_t, uint8_t>, (int8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, double>, (uint64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, float>, (uint64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, int64_t>, (uint64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, int32_t>, (uint64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, int16_t>, (uint64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, int8_t>, (uint64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, uint64_t>, (uint64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, uint32_t>, (uint64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, uint16_t>, (uint64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, double, uint8_t>, (uint64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, double>, (uint64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, float>, (uint64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, int64_t>, (uint64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, int32_t>, (uint64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, int16_t>, (uint64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, int8_t>, (uint64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, uint64_t>, (uint64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, uint32_t>, (uint64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, uint16_t>, (uint64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, float, uint8_t>, (uint64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, double>, (uint64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, float>, (uint64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, int64_t>, (uint64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, int32_t>, (uint64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, int16_t>, (uint64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, int8_t>, (uint64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, uint64_t>, (uint64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, uint32_t>, (uint64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, uint16_t>, (uint64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int64_t, uint8_t>, (uint64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, double>, (uint64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, float>, (uint64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, int64_t>, (uint64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, int32_t>, (uint64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, int16_t>, (uint64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, int8_t>, (uint64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, uint64_t>, (uint64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, uint32_t>, (uint64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, uint16_t>, (uint64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int32_t, uint8_t>, (uint64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, double>, (uint64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, float>, (uint64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, int64_t>, (uint64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, int32_t>, (uint64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, int16_t>, (uint64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, int8_t>, (uint64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, uint64_t>, (uint64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, uint32_t>, (uint64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, uint16_t>, (uint64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int16_t, uint8_t>, (uint64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, double>, (uint64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, float>, (uint64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, int64_t>, (uint64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, int32_t>, (uint64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, int16_t>, (uint64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, int8_t>, (uint64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, uint64_t>, (uint64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, uint32_t>, (uint64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, uint16_t>, (uint64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, int8_t, uint8_t>, (uint64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, double>, (uint64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, float>, (uint64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, int64_t>, (uint64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, int32_t>, (uint64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, int16_t>, (uint64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, int8_t>, (uint64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, uint64_t>, (uint64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, uint32_t>, (uint64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, uint16_t>, (uint64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint64_t, uint8_t>, (uint64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, double>, (uint64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, float>, (uint64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, int64_t>, (uint64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, int32_t>, (uint64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, int16_t>, (uint64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, int8_t>, (uint64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, uint64_t>, (uint64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, uint32_t>, (uint64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, uint16_t>, (uint64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint32_t, uint8_t>, (uint64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, double>, (uint64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, float>, (uint64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, int64_t>, (uint64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, int32_t>, (uint64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, int16_t>, (uint64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, int8_t>, (uint64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, uint64_t>, (uint64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, uint32_t>, (uint64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, uint16_t>, (uint64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint16_t, uint8_t>, (uint64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, double>, (uint64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, float>, (uint64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, int64_t>, (uint64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, int32_t>, (uint64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, int16_t>, (uint64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, int8_t>, (uint64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, uint64_t>, (uint64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, uint32_t>, (uint64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, uint16_t>, (uint64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint64_t, uint8_t, uint8_t>, (uint64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, double>, (uint32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, float>, (uint32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, int64_t>, (uint32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, int32_t>, (uint32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, int16_t>, (uint32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, int8_t>, (uint32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, uint64_t>, (uint32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, uint32_t>, (uint32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, uint16_t>, (uint32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, double, uint8_t>, (uint32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, double>, (uint32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, float>, (uint32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, int64_t>, (uint32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, int32_t>, (uint32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, int16_t>, (uint32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, int8_t>, (uint32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, uint64_t>, (uint32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, uint32_t>, (uint32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, uint16_t>, (uint32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, float, uint8_t>, (uint32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, double>, (uint32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, float>, (uint32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, int64_t>, (uint32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, int32_t>, (uint32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, int16_t>, (uint32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, int8_t>, (uint32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, uint64_t>, (uint32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, uint32_t>, (uint32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, uint16_t>, (uint32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int64_t, uint8_t>, (uint32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, double>, (uint32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, float>, (uint32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, int64_t>, (uint32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, int32_t>, (uint32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, int16_t>, (uint32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, int8_t>, (uint32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, uint64_t>, (uint32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, uint32_t>, (uint32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, uint16_t>, (uint32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int32_t, uint8_t>, (uint32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, double>, (uint32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, float>, (uint32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, int64_t>, (uint32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, int32_t>, (uint32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, int16_t>, (uint32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, int8_t>, (uint32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, uint64_t>, (uint32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, uint32_t>, (uint32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, uint16_t>, (uint32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int16_t, uint8_t>, (uint32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, double>, (uint32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, float>, (uint32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, int64_t>, (uint32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, int32_t>, (uint32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, int16_t>, (uint32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, int8_t>, (uint32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, uint64_t>, (uint32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, uint32_t>, (uint32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, uint16_t>, (uint32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, int8_t, uint8_t>, (uint32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, double>, (uint32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, float>, (uint32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, int64_t>, (uint32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, int32_t>, (uint32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, int16_t>, (uint32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, int8_t>, (uint32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, uint64_t>, (uint32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, uint32_t>, (uint32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, uint16_t>, (uint32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint64_t, uint8_t>, (uint32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, double>, (uint32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, float>, (uint32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, int64_t>, (uint32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, int32_t>, (uint32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, int16_t>, (uint32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, int8_t>, (uint32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, uint64_t>, (uint32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, uint32_t>, (uint32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, uint16_t>, (uint32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint32_t, uint8_t>, (uint32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, double>, (uint32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, float>, (uint32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, int64_t>, (uint32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, int32_t>, (uint32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, int16_t>, (uint32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, int8_t>, (uint32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, uint64_t>, (uint32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, uint32_t>, (uint32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, uint16_t>, (uint32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint16_t, uint8_t>, (uint32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, double>, (uint32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, float>, (uint32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, int64_t>, (uint32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, int32_t>, (uint32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, int16_t>, (uint32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, int8_t>, (uint32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, uint64_t>, (uint32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, uint32_t>, (uint32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, uint16_t>, (uint32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint32_t, uint8_t, uint8_t>, (uint32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, double>, (uint16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, float>, (uint16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, int64_t>, (uint16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, int32_t>, (uint16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, int16_t>, (uint16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, int8_t>, (uint16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, uint64_t>, (uint16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, uint32_t>, (uint16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, uint16_t>, (uint16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, double, uint8_t>, (uint16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, double>, (uint16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, float>, (uint16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, int64_t>, (uint16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, int32_t>, (uint16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, int16_t>, (uint16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, int8_t>, (uint16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, uint64_t>, (uint16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, uint32_t>, (uint16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, uint16_t>, (uint16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, float, uint8_t>, (uint16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, double>, (uint16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, float>, (uint16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, int64_t>, (uint16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, int32_t>, (uint16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, int16_t>, (uint16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, int8_t>, (uint16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, uint64_t>, (uint16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, uint32_t>, (uint16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, uint16_t>, (uint16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int64_t, uint8_t>, (uint16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, double>, (uint16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, float>, (uint16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, int64_t>, (uint16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, int32_t>, (uint16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, int16_t>, (uint16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, int8_t>, (uint16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, uint64_t>, (uint16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, uint32_t>, (uint16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, uint16_t>, (uint16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int32_t, uint8_t>, (uint16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, double>, (uint16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, float>, (uint16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, int64_t>, (uint16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, int32_t>, (uint16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, int16_t>, (uint16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, int8_t>, (uint16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, uint64_t>, (uint16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, uint32_t>, (uint16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, uint16_t>, (uint16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int16_t, uint8_t>, (uint16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, double>, (uint16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, float>, (uint16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, int64_t>, (uint16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, int32_t>, (uint16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, int16_t>, (uint16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, int8_t>, (uint16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, uint64_t>, (uint16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, uint32_t>, (uint16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, uint16_t>, (uint16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, int8_t, uint8_t>, (uint16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, double>, (uint16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, float>, (uint16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, int64_t>, (uint16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, int32_t>, (uint16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, int16_t>, (uint16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, int8_t>, (uint16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, uint64_t>, (uint16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, uint32_t>, (uint16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, uint16_t>, (uint16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint64_t, uint8_t>, (uint16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, double>, (uint16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, float>, (uint16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, int64_t>, (uint16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, int32_t>, (uint16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, int16_t>, (uint16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, int8_t>, (uint16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, uint64_t>, (uint16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, uint32_t>, (uint16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, uint16_t>, (uint16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint32_t, uint8_t>, (uint16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, double>, (uint16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, float>, (uint16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, int64_t>, (uint16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, int32_t>, (uint16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, int16_t>, (uint16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, int8_t>, (uint16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, uint64_t>, (uint16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, uint32_t>, (uint16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, uint16_t>, (uint16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint16_t, uint8_t>, (uint16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, double>, (uint16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, float>, (uint16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, int64_t>, (uint16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, int32_t>, (uint16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, int16_t>, (uint16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, int8_t>, (uint16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, uint64_t>, (uint16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, uint32_t>, (uint16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, uint16_t>, (uint16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint16_t, uint8_t, uint8_t>, (uint16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, double>, (uint8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, float>, (uint8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, int64_t>, (uint8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, int32_t>, (uint8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, int16_t>, (uint8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, int8_t>, (uint8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, uint64_t>, (uint8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, uint32_t>, (uint8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, uint16_t>, (uint8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, double, uint8_t>, (uint8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, double>, (uint8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, float>, (uint8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, int64_t>, (uint8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, int32_t>, (uint8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, int16_t>, (uint8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, int8_t>, (uint8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, uint64_t>, (uint8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, uint32_t>, (uint8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, uint16_t>, (uint8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, float, uint8_t>, (uint8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, double>, (uint8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, float>, (uint8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, int64_t>, (uint8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, int32_t>, (uint8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, int16_t>, (uint8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, int8_t>, (uint8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, uint64_t>, (uint8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, uint32_t>, (uint8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, uint16_t>, (uint8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int64_t, uint8_t>, (uint8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, double>, (uint8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, float>, (uint8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, int64_t>, (uint8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, int32_t>, (uint8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, int16_t>, (uint8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, int8_t>, (uint8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, uint64_t>, (uint8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, uint32_t>, (uint8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, uint16_t>, (uint8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int32_t, uint8_t>, (uint8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, double>, (uint8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, float>, (uint8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, int64_t>, (uint8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, int32_t>, (uint8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, int16_t>, (uint8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, int8_t>, (uint8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, uint64_t>, (uint8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, uint32_t>, (uint8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, uint16_t>, (uint8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int16_t, uint8_t>, (uint8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, double>, (uint8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, float>, (uint8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, int64_t>, (uint8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, int32_t>, (uint8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, int16_t>, (uint8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, int8_t>, (uint8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, uint64_t>, (uint8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, uint32_t>, (uint8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, uint16_t>, (uint8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, int8_t, uint8_t>, (uint8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, double>, (uint8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, float>, (uint8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, int64_t>, (uint8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, int32_t>, (uint8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, int16_t>, (uint8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, int8_t>, (uint8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, uint64_t>, (uint8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, uint32_t>, (uint8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, uint16_t>, (uint8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint64_t, uint8_t>, (uint8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, double>, (uint8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, float>, (uint8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, int64_t>, (uint8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, int32_t>, (uint8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, int16_t>, (uint8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, int8_t>, (uint8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, uint64_t>, (uint8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, uint32_t>, (uint8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, uint16_t>, (uint8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint32_t, uint8_t>, (uint8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, double>, (uint8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, float>, (uint8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, int64_t>, (uint8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, int32_t>, (uint8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, int16_t>, (uint8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, int8_t>, (uint8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, uint64_t>, (uint8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, uint32_t>, (uint8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, uint16_t>, (uint8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint16_t, uint8_t>, (uint8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, double>, (uint8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, float>, (uint8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, int64_t>, (uint8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, int32_t>, (uint8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, int16_t>, (uint8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, int8_t>, (uint8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, uint64_t>, (uint8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, uint32_t>, (uint8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, uint16_t>, (uint8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaAdd2_u8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, add2<uint8_t, uint8_t, uint8_t>, (uint8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, double>, (double*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, float>, (double*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, int64_t>, (double*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, int32_t>, (double*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, int16_t>, (double*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, int8_t>, (double*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, uint64_t>, (double*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, uint32_t>, (double*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, uint16_t>, (double*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, double, uint8_t>, (double*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, double>, (double*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, float>, (double*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, int64_t>, (double*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, int32_t>, (double*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, int16_t>, (double*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, int8_t>, (double*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, uint64_t>, (double*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, uint32_t>, (double*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, uint16_t>, (double*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, float, uint8_t>, (double*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, double>, (double*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, float>, (double*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, int64_t>, (double*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, int32_t>, (double*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, int16_t>, (double*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, int8_t>, (double*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, uint64_t>, (double*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, uint32_t>, (double*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, uint16_t>, (double*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int64_t, uint8_t>, (double*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, double>, (double*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, float>, (double*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, int64_t>, (double*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, int32_t>, (double*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, int16_t>, (double*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, int8_t>, (double*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, uint64_t>, (double*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, uint32_t>, (double*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, uint16_t>, (double*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int32_t, uint8_t>, (double*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, double>, (double*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, float>, (double*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, int64_t>, (double*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, int32_t>, (double*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, int16_t>, (double*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, int8_t>, (double*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, uint64_t>, (double*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, uint32_t>, (double*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, uint16_t>, (double*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int16_t, uint8_t>, (double*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, double>, (double*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, float>, (double*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, int64_t>, (double*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, int32_t>, (double*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, int16_t>, (double*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, int8_t>, (double*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, uint64_t>, (double*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, uint32_t>, (double*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, uint16_t>, (double*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, int8_t, uint8_t>, (double*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, double>, (double*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, float>, (double*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, int64_t>, (double*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, int32_t>, (double*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, int16_t>, (double*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, int8_t>, (double*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, uint64_t>, (double*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, uint32_t>, (double*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, uint16_t>, (double*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint64_t, uint8_t>, (double*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, double>, (double*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, float>, (double*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, int64_t>, (double*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, int32_t>, (double*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, int16_t>, (double*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, int8_t>, (double*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, uint64_t>, (double*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, uint32_t>, (double*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, uint16_t>, (double*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint32_t, uint8_t>, (double*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, double>, (double*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, float>, (double*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, int64_t>, (double*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, int32_t>, (double*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, int16_t>, (double*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, int8_t>, (double*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, uint64_t>, (double*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, uint32_t>, (double*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, uint16_t>, (double*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint16_t, uint8_t>, (double*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, double>, (double*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, float>, (double*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, int64_t>, (double*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, int32_t>, (double*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, int16_t>, (double*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, int8_t>, (double*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, uint64_t>, (double*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, uint32_t>, (double*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, uint16_t>, (double*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<double, uint8_t, uint8_t>, (double*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, double>, (float*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, float>, (float*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, int64_t>, (float*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, int32_t>, (float*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, int16_t>, (float*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, int8_t>, (float*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, uint64_t>, (float*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, uint32_t>, (float*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, uint16_t>, (float*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, double, uint8_t>, (float*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, double>, (float*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, float>, (float*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, int64_t>, (float*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, int32_t>, (float*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, int16_t>, (float*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, int8_t>, (float*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, uint64_t>, (float*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, uint32_t>, (float*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, uint16_t>, (float*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, float, uint8_t>, (float*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, double>, (float*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, float>, (float*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, int64_t>, (float*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, int32_t>, (float*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, int16_t>, (float*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, int8_t>, (float*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, uint64_t>, (float*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, uint32_t>, (float*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, uint16_t>, (float*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int64_t, uint8_t>, (float*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, double>, (float*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, float>, (float*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, int64_t>, (float*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, int32_t>, (float*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, int16_t>, (float*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, int8_t>, (float*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, uint64_t>, (float*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, uint32_t>, (float*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, uint16_t>, (float*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int32_t, uint8_t>, (float*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, double>, (float*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, float>, (float*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, int64_t>, (float*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, int32_t>, (float*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, int16_t>, (float*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, int8_t>, (float*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, uint64_t>, (float*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, uint32_t>, (float*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, uint16_t>, (float*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int16_t, uint8_t>, (float*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, double>, (float*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, float>, (float*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, int64_t>, (float*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, int32_t>, (float*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, int16_t>, (float*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, int8_t>, (float*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, uint64_t>, (float*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, uint32_t>, (float*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, uint16_t>, (float*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, int8_t, uint8_t>, (float*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, double>, (float*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, float>, (float*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, int64_t>, (float*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, int32_t>, (float*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, int16_t>, (float*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, int8_t>, (float*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, uint64_t>, (float*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, uint32_t>, (float*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, uint16_t>, (float*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint64_t, uint8_t>, (float*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, double>, (float*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, float>, (float*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, int64_t>, (float*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, int32_t>, (float*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, int16_t>, (float*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, int8_t>, (float*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, uint64_t>, (float*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, uint32_t>, (float*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, uint16_t>, (float*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint32_t, uint8_t>, (float*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, double>, (float*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, float>, (float*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, int64_t>, (float*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, int32_t>, (float*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, int16_t>, (float*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, int8_t>, (float*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, uint64_t>, (float*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, uint32_t>, (float*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, uint16_t>, (float*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint16_t, uint8_t>, (float*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, double>, (float*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, float>, (float*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, int64_t>, (float*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, int32_t>, (float*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, int16_t>, (float*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, int8_t>, (float*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, uint64_t>, (float*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, uint32_t>, (float*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, uint16_t>, (float*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_f32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<float, uint8_t, uint8_t>, (float*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, double>, (int64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, float>, (int64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, int64_t>, (int64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, int32_t>, (int64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, int16_t>, (int64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, int8_t>, (int64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, uint64_t>, (int64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, uint32_t>, (int64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, uint16_t>, (int64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, double, uint8_t>, (int64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, double>, (int64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, float>, (int64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, int64_t>, (int64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, int32_t>, (int64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, int16_t>, (int64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, int8_t>, (int64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, uint64_t>, (int64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, uint32_t>, (int64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, uint16_t>, (int64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, float, uint8_t>, (int64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, double>, (int64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, float>, (int64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, int64_t>, (int64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, int32_t>, (int64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, int16_t>, (int64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, int8_t>, (int64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, uint64_t>, (int64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, uint32_t>, (int64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, uint16_t>, (int64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int64_t, uint8_t>, (int64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, double>, (int64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, float>, (int64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, int64_t>, (int64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, int32_t>, (int64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, int16_t>, (int64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, int8_t>, (int64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, uint64_t>, (int64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, uint32_t>, (int64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, uint16_t>, (int64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int32_t, uint8_t>, (int64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, double>, (int64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, float>, (int64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, int64_t>, (int64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, int32_t>, (int64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, int16_t>, (int64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, int8_t>, (int64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, uint64_t>, (int64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, uint32_t>, (int64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, uint16_t>, (int64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int16_t, uint8_t>, (int64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, double>, (int64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, float>, (int64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, int64_t>, (int64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, int32_t>, (int64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, int16_t>, (int64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, int8_t>, (int64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, uint64_t>, (int64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, uint32_t>, (int64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, uint16_t>, (int64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, int8_t, uint8_t>, (int64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, double>, (int64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, float>, (int64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, int64_t>, (int64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, int32_t>, (int64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, int16_t>, (int64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, int8_t>, (int64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, uint64_t>, (int64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, uint32_t>, (int64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, uint16_t>, (int64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint64_t, uint8_t>, (int64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, double>, (int64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, float>, (int64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, int64_t>, (int64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, int32_t>, (int64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, int16_t>, (int64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, int8_t>, (int64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, uint64_t>, (int64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, uint32_t>, (int64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, uint16_t>, (int64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint32_t, uint8_t>, (int64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, double>, (int64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, float>, (int64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, int64_t>, (int64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, int32_t>, (int64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, int16_t>, (int64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, int8_t>, (int64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, uint64_t>, (int64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, uint32_t>, (int64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, uint16_t>, (int64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint16_t, uint8_t>, (int64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, double>, (int64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, float>, (int64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, int64_t>, (int64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, int32_t>, (int64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, int16_t>, (int64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, int8_t>, (int64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, uint64_t>, (int64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, uint32_t>, (int64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, uint16_t>, (int64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int64_t, uint8_t, uint8_t>, (int64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, double>, (int32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, float>, (int32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, int64_t>, (int32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, int32_t>, (int32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, int16_t>, (int32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, int8_t>, (int32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, uint64_t>, (int32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, uint32_t>, (int32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, uint16_t>, (int32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, double, uint8_t>, (int32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, double>, (int32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, float>, (int32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, int64_t>, (int32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, int32_t>, (int32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, int16_t>, (int32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, int8_t>, (int32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, uint64_t>, (int32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, uint32_t>, (int32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, uint16_t>, (int32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, float, uint8_t>, (int32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, double>, (int32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, float>, (int32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, int64_t>, (int32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, int32_t>, (int32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, int16_t>, (int32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, int8_t>, (int32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, uint64_t>, (int32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, uint32_t>, (int32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, uint16_t>, (int32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int64_t, uint8_t>, (int32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, double>, (int32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, float>, (int32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, int64_t>, (int32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, int32_t>, (int32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, int16_t>, (int32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, int8_t>, (int32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, uint64_t>, (int32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, uint32_t>, (int32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, uint16_t>, (int32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int32_t, uint8_t>, (int32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, double>, (int32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, float>, (int32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, int64_t>, (int32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, int32_t>, (int32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, int16_t>, (int32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, int8_t>, (int32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, uint64_t>, (int32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, uint32_t>, (int32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, uint16_t>, (int32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int16_t, uint8_t>, (int32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, double>, (int32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, float>, (int32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, int64_t>, (int32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, int32_t>, (int32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, int16_t>, (int32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, int8_t>, (int32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, uint64_t>, (int32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, uint32_t>, (int32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, uint16_t>, (int32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, int8_t, uint8_t>, (int32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, double>, (int32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, float>, (int32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, int64_t>, (int32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, int32_t>, (int32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, int16_t>, (int32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, int8_t>, (int32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, uint64_t>, (int32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, uint32_t>, (int32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, uint16_t>, (int32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint64_t, uint8_t>, (int32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, double>, (int32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, float>, (int32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, int64_t>, (int32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, int32_t>, (int32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, int16_t>, (int32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, int8_t>, (int32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, uint64_t>, (int32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, uint32_t>, (int32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, uint16_t>, (int32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint32_t, uint8_t>, (int32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, double>, (int32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, float>, (int32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, int64_t>, (int32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, int32_t>, (int32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, int16_t>, (int32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, int8_t>, (int32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, uint64_t>, (int32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, uint32_t>, (int32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, uint16_t>, (int32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint16_t, uint8_t>, (int32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, double>, (int32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, float>, (int32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, int64_t>, (int32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, int32_t>, (int32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, int16_t>, (int32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, int8_t>, (int32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, uint64_t>, (int32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, uint32_t>, (int32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, uint16_t>, (int32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int32_t, uint8_t, uint8_t>, (int32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, double>, (int16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, float>, (int16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, int64_t>, (int16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, int32_t>, (int16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, int16_t>, (int16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, int8_t>, (int16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, uint64_t>, (int16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, uint32_t>, (int16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, uint16_t>, (int16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, double, uint8_t>, (int16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, double>, (int16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, float>, (int16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, int64_t>, (int16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, int32_t>, (int16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, int16_t>, (int16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, int8_t>, (int16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, uint64_t>, (int16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, uint32_t>, (int16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, uint16_t>, (int16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, float, uint8_t>, (int16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, double>, (int16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, float>, (int16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, int64_t>, (int16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, int32_t>, (int16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, int16_t>, (int16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, int8_t>, (int16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, uint64_t>, (int16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, uint32_t>, (int16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, uint16_t>, (int16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int64_t, uint8_t>, (int16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, double>, (int16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, float>, (int16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, int64_t>, (int16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, int32_t>, (int16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, int16_t>, (int16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, int8_t>, (int16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, uint64_t>, (int16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, uint32_t>, (int16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, uint16_t>, (int16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int32_t, uint8_t>, (int16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, double>, (int16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, float>, (int16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, int64_t>, (int16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, int32_t>, (int16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, int16_t>, (int16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, int8_t>, (int16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, uint64_t>, (int16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, uint32_t>, (int16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, uint16_t>, (int16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int16_t, uint8_t>, (int16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, double>, (int16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, float>, (int16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, int64_t>, (int16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, int32_t>, (int16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, int16_t>, (int16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, int8_t>, (int16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, uint64_t>, (int16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, uint32_t>, (int16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, uint16_t>, (int16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, int8_t, uint8_t>, (int16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, double>, (int16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, float>, (int16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, int64_t>, (int16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, int32_t>, (int16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, int16_t>, (int16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, int8_t>, (int16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, uint64_t>, (int16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, uint32_t>, (int16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, uint16_t>, (int16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint64_t, uint8_t>, (int16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, double>, (int16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, float>, (int16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, int64_t>, (int16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, int32_t>, (int16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, int16_t>, (int16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, int8_t>, (int16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, uint64_t>, (int16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, uint32_t>, (int16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, uint16_t>, (int16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint32_t, uint8_t>, (int16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, double>, (int16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, float>, (int16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, int64_t>, (int16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, int32_t>, (int16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, int16_t>, (int16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, int8_t>, (int16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, uint64_t>, (int16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, uint32_t>, (int16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, uint16_t>, (int16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint16_t, uint8_t>, (int16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, double>, (int16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, float>, (int16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, int64_t>, (int16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, int32_t>, (int16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, int16_t>, (int16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, int8_t>, (int16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, uint64_t>, (int16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, uint32_t>, (int16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, uint16_t>, (int16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int16_t, uint8_t, uint8_t>, (int16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, double>, (int8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, float>, (int8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, int64_t>, (int8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, int32_t>, (int8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, int16_t>, (int8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, int8_t>, (int8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, uint64_t>, (int8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, uint32_t>, (int8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, uint16_t>, (int8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, double, uint8_t>, (int8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, double>, (int8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, float>, (int8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, int64_t>, (int8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, int32_t>, (int8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, int16_t>, (int8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, int8_t>, (int8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, uint64_t>, (int8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, uint32_t>, (int8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, uint16_t>, (int8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, float, uint8_t>, (int8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, double>, (int8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, float>, (int8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, int64_t>, (int8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, int32_t>, (int8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, int16_t>, (int8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, int8_t>, (int8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, uint64_t>, (int8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, uint32_t>, (int8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, uint16_t>, (int8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int64_t, uint8_t>, (int8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, double>, (int8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, float>, (int8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, int64_t>, (int8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, int32_t>, (int8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, int16_t>, (int8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, int8_t>, (int8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, uint64_t>, (int8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, uint32_t>, (int8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, uint16_t>, (int8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int32_t, uint8_t>, (int8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, double>, (int8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, float>, (int8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, int64_t>, (int8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, int32_t>, (int8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, int16_t>, (int8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, int8_t>, (int8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, uint64_t>, (int8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, uint32_t>, (int8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, uint16_t>, (int8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int16_t, uint8_t>, (int8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, double>, (int8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, float>, (int8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, int64_t>, (int8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, int32_t>, (int8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, int16_t>, (int8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, int8_t>, (int8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, uint64_t>, (int8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, uint32_t>, (int8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, uint16_t>, (int8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, int8_t, uint8_t>, (int8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, double>, (int8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, float>, (int8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, int64_t>, (int8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, int32_t>, (int8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, int16_t>, (int8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, int8_t>, (int8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, uint64_t>, (int8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, uint32_t>, (int8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, uint16_t>, (int8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint64_t, uint8_t>, (int8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, double>, (int8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, float>, (int8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, int64_t>, (int8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, int32_t>, (int8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, int16_t>, (int8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, int8_t>, (int8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, uint64_t>, (int8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, uint32_t>, (int8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, uint16_t>, (int8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint32_t, uint8_t>, (int8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, double>, (int8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, float>, (int8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, int64_t>, (int8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, int32_t>, (int8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, int16_t>, (int8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, int8_t>, (int8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, uint64_t>, (int8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, uint32_t>, (int8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, uint16_t>, (int8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint16_t, uint8_t>, (int8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, double>, (int8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, float>, (int8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, int64_t>, (int8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, int32_t>, (int8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, int16_t>, (int8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, int8_t>, (int8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, uint64_t>, (int8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, uint32_t>, (int8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, uint16_t>, (int8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_i8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<int8_t, uint8_t, uint8_t>, (int8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, double>, (uint64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, float>, (uint64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, int64_t>, (uint64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, int32_t>, (uint64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, int16_t>, (uint64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, int8_t>, (uint64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, uint64_t>, (uint64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, uint32_t>, (uint64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, uint16_t>, (uint64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, double, uint8_t>, (uint64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, double>, (uint64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, float>, (uint64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, int64_t>, (uint64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, int32_t>, (uint64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, int16_t>, (uint64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, int8_t>, (uint64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, uint64_t>, (uint64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, uint32_t>, (uint64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, uint16_t>, (uint64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, float, uint8_t>, (uint64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, double>, (uint64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, float>, (uint64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, int64_t>, (uint64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, int32_t>, (uint64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, int16_t>, (uint64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, int8_t>, (uint64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, uint64_t>, (uint64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, uint32_t>, (uint64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, uint16_t>, (uint64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int64_t, uint8_t>, (uint64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, double>, (uint64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, float>, (uint64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, int64_t>, (uint64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, int32_t>, (uint64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, int16_t>, (uint64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, int8_t>, (uint64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, uint64_t>, (uint64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, uint32_t>, (uint64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, uint16_t>, (uint64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int32_t, uint8_t>, (uint64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, double>, (uint64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, float>, (uint64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, int64_t>, (uint64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, int32_t>, (uint64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, int16_t>, (uint64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, int8_t>, (uint64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, uint64_t>, (uint64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, uint32_t>, (uint64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, uint16_t>, (uint64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int16_t, uint8_t>, (uint64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, double>, (uint64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, float>, (uint64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, int64_t>, (uint64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, int32_t>, (uint64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, int16_t>, (uint64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, int8_t>, (uint64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, uint64_t>, (uint64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, uint32_t>, (uint64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, uint16_t>, (uint64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, int8_t, uint8_t>, (uint64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, double>, (uint64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, float>, (uint64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, int64_t>, (uint64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, int32_t>, (uint64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, int16_t>, (uint64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, int8_t>, (uint64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, uint64_t>, (uint64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, uint32_t>, (uint64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, uint16_t>, (uint64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint64_t, uint8_t>, (uint64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, double>, (uint64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, float>, (uint64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, int64_t>, (uint64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, int32_t>, (uint64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, int16_t>, (uint64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, int8_t>, (uint64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, uint64_t>, (uint64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, uint32_t>, (uint64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, uint16_t>, (uint64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint32_t, uint8_t>, (uint64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, double>, (uint64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, float>, (uint64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, int64_t>, (uint64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, int32_t>, (uint64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, int16_t>, (uint64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, int8_t>, (uint64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, uint64_t>, (uint64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, uint32_t>, (uint64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, uint16_t>, (uint64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint16_t, uint8_t>, (uint64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, double>, (uint64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, float>, (uint64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, int64_t>, (uint64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, int32_t>, (uint64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, int16_t>, (uint64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, int8_t>, (uint64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, uint64_t>, (uint64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, uint32_t>, (uint64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, uint16_t>, (uint64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint64_t, uint8_t, uint8_t>, (uint64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, double>, (uint32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, float>, (uint32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, int64_t>, (uint32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, int32_t>, (uint32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, int16_t>, (uint32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, int8_t>, (uint32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, uint64_t>, (uint32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, uint32_t>, (uint32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, uint16_t>, (uint32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, double, uint8_t>, (uint32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, double>, (uint32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, float>, (uint32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, int64_t>, (uint32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, int32_t>, (uint32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, int16_t>, (uint32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, int8_t>, (uint32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, uint64_t>, (uint32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, uint32_t>, (uint32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, uint16_t>, (uint32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, float, uint8_t>, (uint32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, double>, (uint32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, float>, (uint32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, int64_t>, (uint32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, int32_t>, (uint32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, int16_t>, (uint32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, int8_t>, (uint32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, uint64_t>, (uint32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, uint32_t>, (uint32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, uint16_t>, (uint32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int64_t, uint8_t>, (uint32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, double>, (uint32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, float>, (uint32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, int64_t>, (uint32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, int32_t>, (uint32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, int16_t>, (uint32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, int8_t>, (uint32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, uint64_t>, (uint32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, uint32_t>, (uint32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, uint16_t>, (uint32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int32_t, uint8_t>, (uint32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, double>, (uint32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, float>, (uint32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, int64_t>, (uint32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, int32_t>, (uint32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, int16_t>, (uint32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, int8_t>, (uint32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, uint64_t>, (uint32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, uint32_t>, (uint32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, uint16_t>, (uint32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int16_t, uint8_t>, (uint32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, double>, (uint32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, float>, (uint32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, int64_t>, (uint32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, int32_t>, (uint32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, int16_t>, (uint32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, int8_t>, (uint32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, uint64_t>, (uint32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, uint32_t>, (uint32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, uint16_t>, (uint32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, int8_t, uint8_t>, (uint32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, double>, (uint32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, float>, (uint32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, int64_t>, (uint32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, int32_t>, (uint32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, int16_t>, (uint32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, int8_t>, (uint32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, uint64_t>, (uint32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, uint32_t>, (uint32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, uint16_t>, (uint32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint64_t, uint8_t>, (uint32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, double>, (uint32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, float>, (uint32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, int64_t>, (uint32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, int32_t>, (uint32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, int16_t>, (uint32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, int8_t>, (uint32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, uint64_t>, (uint32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, uint32_t>, (uint32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, uint16_t>, (uint32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint32_t, uint8_t>, (uint32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, double>, (uint32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, float>, (uint32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, int64_t>, (uint32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, int32_t>, (uint32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, int16_t>, (uint32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, int8_t>, (uint32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, uint64_t>, (uint32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, uint32_t>, (uint32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, uint16_t>, (uint32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint16_t, uint8_t>, (uint32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, double>, (uint32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, float>, (uint32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, int64_t>, (uint32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, int32_t>, (uint32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, int16_t>, (uint32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, int8_t>, (uint32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, uint64_t>, (uint32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, uint32_t>, (uint32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, uint16_t>, (uint32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint32_t, uint8_t, uint8_t>, (uint32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, double>, (uint16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, float>, (uint16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, int64_t>, (uint16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, int32_t>, (uint16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, int16_t>, (uint16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, int8_t>, (uint16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, uint64_t>, (uint16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, uint32_t>, (uint16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, uint16_t>, (uint16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, double, uint8_t>, (uint16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, double>, (uint16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, float>, (uint16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, int64_t>, (uint16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, int32_t>, (uint16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, int16_t>, (uint16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, int8_t>, (uint16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, uint64_t>, (uint16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, uint32_t>, (uint16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, uint16_t>, (uint16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, float, uint8_t>, (uint16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, double>, (uint16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, float>, (uint16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, int64_t>, (uint16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, int32_t>, (uint16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, int16_t>, (uint16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, int8_t>, (uint16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, uint64_t>, (uint16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, uint32_t>, (uint16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, uint16_t>, (uint16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int64_t, uint8_t>, (uint16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, double>, (uint16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, float>, (uint16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, int64_t>, (uint16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, int32_t>, (uint16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, int16_t>, (uint16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, int8_t>, (uint16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, uint64_t>, (uint16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, uint32_t>, (uint16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, uint16_t>, (uint16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int32_t, uint8_t>, (uint16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, double>, (uint16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, float>, (uint16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, int64_t>, (uint16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, int32_t>, (uint16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, int16_t>, (uint16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, int8_t>, (uint16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, uint64_t>, (uint16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, uint32_t>, (uint16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, uint16_t>, (uint16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int16_t, uint8_t>, (uint16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, double>, (uint16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, float>, (uint16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, int64_t>, (uint16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, int32_t>, (uint16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, int16_t>, (uint16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, int8_t>, (uint16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, uint64_t>, (uint16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, uint32_t>, (uint16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, uint16_t>, (uint16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, int8_t, uint8_t>, (uint16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, double>, (uint16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, float>, (uint16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, int64_t>, (uint16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, int32_t>, (uint16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, int16_t>, (uint16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, int8_t>, (uint16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, uint64_t>, (uint16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, uint32_t>, (uint16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, uint16_t>, (uint16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint64_t, uint8_t>, (uint16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, double>, (uint16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, float>, (uint16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, int64_t>, (uint16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, int32_t>, (uint16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, int16_t>, (uint16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, int8_t>, (uint16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, uint64_t>, (uint16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, uint32_t>, (uint16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, uint16_t>, (uint16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint32_t, uint8_t>, (uint16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, double>, (uint16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, float>, (uint16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, int64_t>, (uint16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, int32_t>, (uint16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, int16_t>, (uint16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, int8_t>, (uint16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, uint64_t>, (uint16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, uint32_t>, (uint16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, uint16_t>, (uint16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint16_t, uint8_t>, (uint16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, double>, (uint16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, float>, (uint16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, int64_t>, (uint16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, int32_t>, (uint16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, int16_t>, (uint16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, int8_t>, (uint16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, uint64_t>, (uint16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, uint32_t>, (uint16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, uint16_t>, (uint16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint16_t, uint8_t, uint8_t>, (uint16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, double>, (uint8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, float>, (uint8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, int64_t>, (uint8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, int32_t>, (uint8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, int16_t>, (uint8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, int8_t>, (uint8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, uint64_t>, (uint8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, uint32_t>, (uint8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, uint16_t>, (uint8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, double, uint8_t>, (uint8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, double>, (uint8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, float>, (uint8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, int64_t>, (uint8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, int32_t>, (uint8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, int16_t>, (uint8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, int8_t>, (uint8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, uint64_t>, (uint8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, uint32_t>, (uint8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, uint16_t>, (uint8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, float, uint8_t>, (uint8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, double>, (uint8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, float>, (uint8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, int64_t>, (uint8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, int32_t>, (uint8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, int16_t>, (uint8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, int8_t>, (uint8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, uint64_t>, (uint8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, uint32_t>, (uint8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, uint16_t>, (uint8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int64_t, uint8_t>, (uint8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, double>, (uint8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, float>, (uint8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, int64_t>, (uint8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, int32_t>, (uint8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, int16_t>, (uint8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, int8_t>, (uint8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, uint64_t>, (uint8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, uint32_t>, (uint8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, uint16_t>, (uint8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int32_t, uint8_t>, (uint8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, double>, (uint8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, float>, (uint8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, int64_t>, (uint8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, int32_t>, (uint8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, int16_t>, (uint8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, int8_t>, (uint8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, uint64_t>, (uint8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, uint32_t>, (uint8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, uint16_t>, (uint8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int16_t, uint8_t>, (uint8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, double>, (uint8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, float>, (uint8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, int64_t>, (uint8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, int32_t>, (uint8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, int16_t>, (uint8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, int8_t>, (uint8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, uint64_t>, (uint8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, uint32_t>, (uint8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, uint16_t>, (uint8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, int8_t, uint8_t>, (uint8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, double>, (uint8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, float>, (uint8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, int64_t>, (uint8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, int32_t>, (uint8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, int16_t>, (uint8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, int8_t>, (uint8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, uint64_t>, (uint8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, uint32_t>, (uint8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, uint16_t>, (uint8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint64_t, uint8_t>, (uint8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, double>, (uint8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, float>, (uint8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, int64_t>, (uint8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, int32_t>, (uint8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, int16_t>, (uint8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, int8_t>, (uint8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, uint64_t>, (uint8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, uint32_t>, (uint8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, uint16_t>, (uint8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint32_t, uint8_t>, (uint8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, double>, (uint8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, float>, (uint8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, int64_t>, (uint8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, int32_t>, (uint8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, int16_t>, (uint8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, int8_t>, (uint8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, uint64_t>, (uint8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, uint32_t>, (uint8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, uint16_t>, (uint8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint16_t, uint8_t>, (uint8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, double>, (uint8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, float>, (uint8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, int64_t>, (uint8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, int32_t>, (uint8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, int16_t>, (uint8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, int8_t>, (uint8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, uint64_t>, (uint8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, uint32_t>, (uint8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, uint16_t>, (uint8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaSub2_u8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, sub2<uint8_t, uint8_t, uint8_t>, (uint8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, double>, (double*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, float>, (double*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, int64_t>, (double*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, int32_t>, (double*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, int16_t>, (double*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, int8_t>, (double*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, uint64_t>, (double*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, uint32_t>, (double*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, uint16_t>, (double*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, double, uint8_t>, (double*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, double>, (double*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, float>, (double*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, int64_t>, (double*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, int32_t>, (double*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, int16_t>, (double*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, int8_t>, (double*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, uint64_t>, (double*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, uint32_t>, (double*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, uint16_t>, (double*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, float, uint8_t>, (double*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, double>, (double*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, float>, (double*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, int64_t>, (double*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, int32_t>, (double*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, int16_t>, (double*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, int8_t>, (double*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, uint64_t>, (double*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, uint32_t>, (double*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, uint16_t>, (double*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int64_t, uint8_t>, (double*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, double>, (double*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, float>, (double*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, int64_t>, (double*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, int32_t>, (double*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, int16_t>, (double*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, int8_t>, (double*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, uint64_t>, (double*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, uint32_t>, (double*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, uint16_t>, (double*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int32_t, uint8_t>, (double*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, double>, (double*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, float>, (double*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, int64_t>, (double*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, int32_t>, (double*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, int16_t>, (double*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, int8_t>, (double*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, uint64_t>, (double*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, uint32_t>, (double*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, uint16_t>, (double*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int16_t, uint8_t>, (double*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, double>, (double*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, float>, (double*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, int64_t>, (double*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, int32_t>, (double*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, int16_t>, (double*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, int8_t>, (double*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, uint64_t>, (double*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, uint32_t>, (double*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, uint16_t>, (double*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, int8_t, uint8_t>, (double*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, double>, (double*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, float>, (double*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, int64_t>, (double*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, int32_t>, (double*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, int16_t>, (double*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, int8_t>, (double*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, uint64_t>, (double*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, uint32_t>, (double*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, uint16_t>, (double*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint64_t, uint8_t>, (double*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, double>, (double*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, float>, (double*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, int64_t>, (double*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, int32_t>, (double*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, int16_t>, (double*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, int8_t>, (double*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, uint64_t>, (double*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, uint32_t>, (double*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, uint16_t>, (double*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint32_t, uint8_t>, (double*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, double>, (double*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, float>, (double*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, int64_t>, (double*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, int32_t>, (double*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, int16_t>, (double*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, int8_t>, (double*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, uint64_t>, (double*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, uint32_t>, (double*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, uint16_t>, (double*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint16_t, uint8_t>, (double*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, double>, (double*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, float>, (double*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, int64_t>, (double*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, int32_t>, (double*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, int16_t>, (double*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, int8_t>, (double*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, uint64_t>, (double*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, uint32_t>, (double*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, uint16_t>, (double*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<double, uint8_t, uint8_t>, (double*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, double>, (float*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, float>, (float*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, int64_t>, (float*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, int32_t>, (float*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, int16_t>, (float*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, int8_t>, (float*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, uint64_t>, (float*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, uint32_t>, (float*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, uint16_t>, (float*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, double, uint8_t>, (float*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, double>, (float*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, float>, (float*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, int64_t>, (float*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, int32_t>, (float*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, int16_t>, (float*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, int8_t>, (float*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, uint64_t>, (float*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, uint32_t>, (float*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, uint16_t>, (float*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, float, uint8_t>, (float*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, double>, (float*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, float>, (float*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, int64_t>, (float*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, int32_t>, (float*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, int16_t>, (float*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, int8_t>, (float*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, uint64_t>, (float*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, uint32_t>, (float*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, uint16_t>, (float*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int64_t, uint8_t>, (float*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, double>, (float*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, float>, (float*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, int64_t>, (float*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, int32_t>, (float*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, int16_t>, (float*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, int8_t>, (float*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, uint64_t>, (float*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, uint32_t>, (float*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, uint16_t>, (float*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int32_t, uint8_t>, (float*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, double>, (float*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, float>, (float*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, int64_t>, (float*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, int32_t>, (float*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, int16_t>, (float*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, int8_t>, (float*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, uint64_t>, (float*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, uint32_t>, (float*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, uint16_t>, (float*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int16_t, uint8_t>, (float*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, double>, (float*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, float>, (float*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, int64_t>, (float*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, int32_t>, (float*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, int16_t>, (float*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, int8_t>, (float*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, uint64_t>, (float*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, uint32_t>, (float*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, uint16_t>, (float*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, int8_t, uint8_t>, (float*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, double>, (float*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, float>, (float*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, int64_t>, (float*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, int32_t>, (float*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, int16_t>, (float*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, int8_t>, (float*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, uint64_t>, (float*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, uint32_t>, (float*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, uint16_t>, (float*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint64_t, uint8_t>, (float*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, double>, (float*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, float>, (float*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, int64_t>, (float*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, int32_t>, (float*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, int16_t>, (float*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, int8_t>, (float*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, uint64_t>, (float*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, uint32_t>, (float*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, uint16_t>, (float*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint32_t, uint8_t>, (float*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, double>, (float*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, float>, (float*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, int64_t>, (float*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, int32_t>, (float*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, int16_t>, (float*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, int8_t>, (float*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, uint64_t>, (float*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, uint32_t>, (float*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, uint16_t>, (float*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint16_t, uint8_t>, (float*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, double>, (float*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, float>, (float*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, int64_t>, (float*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, int32_t>, (float*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, int16_t>, (float*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, int8_t>, (float*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, uint64_t>, (float*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, uint32_t>, (float*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, uint16_t>, (float*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_f32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<float, uint8_t, uint8_t>, (float*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, double>, (int64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, float>, (int64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, int64_t>, (int64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, int32_t>, (int64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, int16_t>, (int64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, int8_t>, (int64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, uint64_t>, (int64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, uint32_t>, (int64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, uint16_t>, (int64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, double, uint8_t>, (int64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, double>, (int64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, float>, (int64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, int64_t>, (int64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, int32_t>, (int64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, int16_t>, (int64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, int8_t>, (int64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, uint64_t>, (int64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, uint32_t>, (int64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, uint16_t>, (int64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, float, uint8_t>, (int64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, double>, (int64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, float>, (int64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, int64_t>, (int64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, int32_t>, (int64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, int16_t>, (int64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, int8_t>, (int64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, uint64_t>, (int64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, uint32_t>, (int64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, uint16_t>, (int64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int64_t, uint8_t>, (int64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, double>, (int64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, float>, (int64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, int64_t>, (int64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, int32_t>, (int64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, int16_t>, (int64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, int8_t>, (int64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, uint64_t>, (int64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, uint32_t>, (int64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, uint16_t>, (int64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int32_t, uint8_t>, (int64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, double>, (int64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, float>, (int64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, int64_t>, (int64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, int32_t>, (int64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, int16_t>, (int64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, int8_t>, (int64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, uint64_t>, (int64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, uint32_t>, (int64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, uint16_t>, (int64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int16_t, uint8_t>, (int64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, double>, (int64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, float>, (int64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, int64_t>, (int64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, int32_t>, (int64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, int16_t>, (int64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, int8_t>, (int64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, uint64_t>, (int64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, uint32_t>, (int64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, uint16_t>, (int64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, int8_t, uint8_t>, (int64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, double>, (int64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, float>, (int64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, int64_t>, (int64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, int32_t>, (int64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, int16_t>, (int64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, int8_t>, (int64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, uint64_t>, (int64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, uint32_t>, (int64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, uint16_t>, (int64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint64_t, uint8_t>, (int64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, double>, (int64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, float>, (int64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, int64_t>, (int64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, int32_t>, (int64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, int16_t>, (int64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, int8_t>, (int64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, uint64_t>, (int64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, uint32_t>, (int64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, uint16_t>, (int64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint32_t, uint8_t>, (int64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, double>, (int64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, float>, (int64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, int64_t>, (int64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, int32_t>, (int64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, int16_t>, (int64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, int8_t>, (int64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, uint64_t>, (int64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, uint32_t>, (int64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, uint16_t>, (int64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint16_t, uint8_t>, (int64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, double>, (int64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, float>, (int64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, int64_t>, (int64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, int32_t>, (int64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, int16_t>, (int64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, int8_t>, (int64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, uint64_t>, (int64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, uint32_t>, (int64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, uint16_t>, (int64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int64_t, uint8_t, uint8_t>, (int64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, double>, (int32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, float>, (int32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, int64_t>, (int32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, int32_t>, (int32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, int16_t>, (int32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, int8_t>, (int32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, uint64_t>, (int32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, uint32_t>, (int32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, uint16_t>, (int32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, double, uint8_t>, (int32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, double>, (int32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, float>, (int32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, int64_t>, (int32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, int32_t>, (int32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, int16_t>, (int32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, int8_t>, (int32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, uint64_t>, (int32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, uint32_t>, (int32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, uint16_t>, (int32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, float, uint8_t>, (int32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, double>, (int32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, float>, (int32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, int64_t>, (int32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, int32_t>, (int32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, int16_t>, (int32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, int8_t>, (int32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, uint64_t>, (int32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, uint32_t>, (int32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, uint16_t>, (int32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int64_t, uint8_t>, (int32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, double>, (int32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, float>, (int32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, int64_t>, (int32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, int32_t>, (int32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, int16_t>, (int32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, int8_t>, (int32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, uint64_t>, (int32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, uint32_t>, (int32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, uint16_t>, (int32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int32_t, uint8_t>, (int32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, double>, (int32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, float>, (int32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, int64_t>, (int32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, int32_t>, (int32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, int16_t>, (int32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, int8_t>, (int32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, uint64_t>, (int32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, uint32_t>, (int32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, uint16_t>, (int32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int16_t, uint8_t>, (int32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, double>, (int32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, float>, (int32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, int64_t>, (int32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, int32_t>, (int32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, int16_t>, (int32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, int8_t>, (int32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, uint64_t>, (int32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, uint32_t>, (int32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, uint16_t>, (int32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, int8_t, uint8_t>, (int32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, double>, (int32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, float>, (int32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, int64_t>, (int32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, int32_t>, (int32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, int16_t>, (int32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, int8_t>, (int32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, uint64_t>, (int32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, uint32_t>, (int32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, uint16_t>, (int32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint64_t, uint8_t>, (int32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, double>, (int32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, float>, (int32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, int64_t>, (int32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, int32_t>, (int32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, int16_t>, (int32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, int8_t>, (int32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, uint64_t>, (int32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, uint32_t>, (int32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, uint16_t>, (int32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint32_t, uint8_t>, (int32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, double>, (int32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, float>, (int32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, int64_t>, (int32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, int32_t>, (int32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, int16_t>, (int32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, int8_t>, (int32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, uint64_t>, (int32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, uint32_t>, (int32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, uint16_t>, (int32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint16_t, uint8_t>, (int32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, double>, (int32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, float>, (int32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, int64_t>, (int32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, int32_t>, (int32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, int16_t>, (int32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, int8_t>, (int32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, uint64_t>, (int32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, uint32_t>, (int32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, uint16_t>, (int32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int32_t, uint8_t, uint8_t>, (int32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, double>, (int16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, float>, (int16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, int64_t>, (int16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, int32_t>, (int16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, int16_t>, (int16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, int8_t>, (int16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, uint64_t>, (int16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, uint32_t>, (int16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, uint16_t>, (int16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, double, uint8_t>, (int16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, double>, (int16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, float>, (int16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, int64_t>, (int16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, int32_t>, (int16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, int16_t>, (int16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, int8_t>, (int16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, uint64_t>, (int16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, uint32_t>, (int16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, uint16_t>, (int16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, float, uint8_t>, (int16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, double>, (int16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, float>, (int16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, int64_t>, (int16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, int32_t>, (int16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, int16_t>, (int16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, int8_t>, (int16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, uint64_t>, (int16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, uint32_t>, (int16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, uint16_t>, (int16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int64_t, uint8_t>, (int16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, double>, (int16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, float>, (int16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, int64_t>, (int16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, int32_t>, (int16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, int16_t>, (int16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, int8_t>, (int16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, uint64_t>, (int16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, uint32_t>, (int16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, uint16_t>, (int16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int32_t, uint8_t>, (int16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, double>, (int16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, float>, (int16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, int64_t>, (int16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, int32_t>, (int16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, int16_t>, (int16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, int8_t>, (int16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, uint64_t>, (int16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, uint32_t>, (int16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, uint16_t>, (int16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int16_t, uint8_t>, (int16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, double>, (int16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, float>, (int16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, int64_t>, (int16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, int32_t>, (int16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, int16_t>, (int16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, int8_t>, (int16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, uint64_t>, (int16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, uint32_t>, (int16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, uint16_t>, (int16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, int8_t, uint8_t>, (int16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, double>, (int16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, float>, (int16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, int64_t>, (int16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, int32_t>, (int16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, int16_t>, (int16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, int8_t>, (int16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, uint64_t>, (int16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, uint32_t>, (int16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, uint16_t>, (int16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint64_t, uint8_t>, (int16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, double>, (int16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, float>, (int16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, int64_t>, (int16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, int32_t>, (int16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, int16_t>, (int16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, int8_t>, (int16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, uint64_t>, (int16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, uint32_t>, (int16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, uint16_t>, (int16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint32_t, uint8_t>, (int16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, double>, (int16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, float>, (int16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, int64_t>, (int16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, int32_t>, (int16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, int16_t>, (int16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, int8_t>, (int16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, uint64_t>, (int16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, uint32_t>, (int16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, uint16_t>, (int16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint16_t, uint8_t>, (int16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, double>, (int16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, float>, (int16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, int64_t>, (int16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, int32_t>, (int16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, int16_t>, (int16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, int8_t>, (int16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, uint64_t>, (int16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, uint32_t>, (int16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, uint16_t>, (int16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int16_t, uint8_t, uint8_t>, (int16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, double>, (int8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, float>, (int8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, int64_t>, (int8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, int32_t>, (int8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, int16_t>, (int8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, int8_t>, (int8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, uint64_t>, (int8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, uint32_t>, (int8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, uint16_t>, (int8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, double, uint8_t>, (int8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, double>, (int8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, float>, (int8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, int64_t>, (int8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, int32_t>, (int8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, int16_t>, (int8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, int8_t>, (int8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, uint64_t>, (int8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, uint32_t>, (int8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, uint16_t>, (int8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, float, uint8_t>, (int8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, double>, (int8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, float>, (int8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, int64_t>, (int8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, int32_t>, (int8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, int16_t>, (int8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, int8_t>, (int8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, uint64_t>, (int8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, uint32_t>, (int8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, uint16_t>, (int8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int64_t, uint8_t>, (int8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, double>, (int8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, float>, (int8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, int64_t>, (int8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, int32_t>, (int8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, int16_t>, (int8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, int8_t>, (int8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, uint64_t>, (int8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, uint32_t>, (int8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, uint16_t>, (int8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int32_t, uint8_t>, (int8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, double>, (int8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, float>, (int8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, int64_t>, (int8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, int32_t>, (int8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, int16_t>, (int8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, int8_t>, (int8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, uint64_t>, (int8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, uint32_t>, (int8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, uint16_t>, (int8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int16_t, uint8_t>, (int8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, double>, (int8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, float>, (int8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, int64_t>, (int8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, int32_t>, (int8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, int16_t>, (int8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, int8_t>, (int8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, uint64_t>, (int8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, uint32_t>, (int8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, uint16_t>, (int8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, int8_t, uint8_t>, (int8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, double>, (int8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, float>, (int8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, int64_t>, (int8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, int32_t>, (int8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, int16_t>, (int8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, int8_t>, (int8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, uint64_t>, (int8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, uint32_t>, (int8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, uint16_t>, (int8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint64_t, uint8_t>, (int8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, double>, (int8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, float>, (int8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, int64_t>, (int8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, int32_t>, (int8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, int16_t>, (int8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, int8_t>, (int8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, uint64_t>, (int8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, uint32_t>, (int8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, uint16_t>, (int8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint32_t, uint8_t>, (int8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, double>, (int8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, float>, (int8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, int64_t>, (int8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, int32_t>, (int8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, int16_t>, (int8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, int8_t>, (int8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, uint64_t>, (int8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, uint32_t>, (int8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, uint16_t>, (int8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint16_t, uint8_t>, (int8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, double>, (int8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, float>, (int8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, int64_t>, (int8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, int32_t>, (int8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, int16_t>, (int8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, int8_t>, (int8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, uint64_t>, (int8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, uint32_t>, (int8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, uint16_t>, (int8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_i8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<int8_t, uint8_t, uint8_t>, (int8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, double>, (uint64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, float>, (uint64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, int64_t>, (uint64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, int32_t>, (uint64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, int16_t>, (uint64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, int8_t>, (uint64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, uint64_t>, (uint64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, uint32_t>, (uint64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, uint16_t>, (uint64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, double, uint8_t>, (uint64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, double>, (uint64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, float>, (uint64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, int64_t>, (uint64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, int32_t>, (uint64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, int16_t>, (uint64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, int8_t>, (uint64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, uint64_t>, (uint64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, uint32_t>, (uint64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, uint16_t>, (uint64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, float, uint8_t>, (uint64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, double>, (uint64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, float>, (uint64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, int64_t>, (uint64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, int32_t>, (uint64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, int16_t>, (uint64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, int8_t>, (uint64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, uint64_t>, (uint64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, uint32_t>, (uint64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, uint16_t>, (uint64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int64_t, uint8_t>, (uint64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, double>, (uint64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, float>, (uint64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, int64_t>, (uint64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, int32_t>, (uint64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, int16_t>, (uint64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, int8_t>, (uint64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, uint64_t>, (uint64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, uint32_t>, (uint64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, uint16_t>, (uint64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int32_t, uint8_t>, (uint64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, double>, (uint64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, float>, (uint64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, int64_t>, (uint64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, int32_t>, (uint64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, int16_t>, (uint64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, int8_t>, (uint64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, uint64_t>, (uint64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, uint32_t>, (uint64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, uint16_t>, (uint64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int16_t, uint8_t>, (uint64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, double>, (uint64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, float>, (uint64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, int64_t>, (uint64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, int32_t>, (uint64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, int16_t>, (uint64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, int8_t>, (uint64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, uint64_t>, (uint64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, uint32_t>, (uint64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, uint16_t>, (uint64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, int8_t, uint8_t>, (uint64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, double>, (uint64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, float>, (uint64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, int64_t>, (uint64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, int32_t>, (uint64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, int16_t>, (uint64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, int8_t>, (uint64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, uint64_t>, (uint64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, uint32_t>, (uint64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, uint16_t>, (uint64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint64_t, uint8_t>, (uint64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, double>, (uint64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, float>, (uint64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, int64_t>, (uint64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, int32_t>, (uint64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, int16_t>, (uint64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, int8_t>, (uint64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, uint64_t>, (uint64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, uint32_t>, (uint64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, uint16_t>, (uint64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint32_t, uint8_t>, (uint64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, double>, (uint64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, float>, (uint64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, int64_t>, (uint64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, int32_t>, (uint64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, int16_t>, (uint64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, int8_t>, (uint64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, uint64_t>, (uint64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, uint32_t>, (uint64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, uint16_t>, (uint64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint16_t, uint8_t>, (uint64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, double>, (uint64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, float>, (uint64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, int64_t>, (uint64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, int32_t>, (uint64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, int16_t>, (uint64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, int8_t>, (uint64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, uint64_t>, (uint64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, uint32_t>, (uint64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, uint16_t>, (uint64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint64_t, uint8_t, uint8_t>, (uint64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, double>, (uint32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, float>, (uint32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, int64_t>, (uint32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, int32_t>, (uint32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, int16_t>, (uint32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, int8_t>, (uint32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, uint64_t>, (uint32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, uint32_t>, (uint32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, uint16_t>, (uint32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, double, uint8_t>, (uint32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, double>, (uint32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, float>, (uint32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, int64_t>, (uint32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, int32_t>, (uint32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, int16_t>, (uint32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, int8_t>, (uint32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, uint64_t>, (uint32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, uint32_t>, (uint32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, uint16_t>, (uint32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, float, uint8_t>, (uint32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, double>, (uint32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, float>, (uint32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, int64_t>, (uint32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, int32_t>, (uint32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, int16_t>, (uint32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, int8_t>, (uint32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, uint64_t>, (uint32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, uint32_t>, (uint32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, uint16_t>, (uint32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int64_t, uint8_t>, (uint32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, double>, (uint32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, float>, (uint32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, int64_t>, (uint32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, int32_t>, (uint32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, int16_t>, (uint32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, int8_t>, (uint32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, uint64_t>, (uint32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, uint32_t>, (uint32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, uint16_t>, (uint32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int32_t, uint8_t>, (uint32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, double>, (uint32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, float>, (uint32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, int64_t>, (uint32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, int32_t>, (uint32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, int16_t>, (uint32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, int8_t>, (uint32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, uint64_t>, (uint32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, uint32_t>, (uint32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, uint16_t>, (uint32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int16_t, uint8_t>, (uint32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, double>, (uint32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, float>, (uint32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, int64_t>, (uint32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, int32_t>, (uint32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, int16_t>, (uint32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, int8_t>, (uint32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, uint64_t>, (uint32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, uint32_t>, (uint32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, uint16_t>, (uint32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, int8_t, uint8_t>, (uint32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, double>, (uint32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, float>, (uint32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, int64_t>, (uint32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, int32_t>, (uint32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, int16_t>, (uint32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, int8_t>, (uint32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, uint64_t>, (uint32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, uint32_t>, (uint32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, uint16_t>, (uint32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint64_t, uint8_t>, (uint32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, double>, (uint32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, float>, (uint32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, int64_t>, (uint32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, int32_t>, (uint32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, int16_t>, (uint32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, int8_t>, (uint32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, uint64_t>, (uint32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, uint32_t>, (uint32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, uint16_t>, (uint32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint32_t, uint8_t>, (uint32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, double>, (uint32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, float>, (uint32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, int64_t>, (uint32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, int32_t>, (uint32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, int16_t>, (uint32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, int8_t>, (uint32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, uint64_t>, (uint32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, uint32_t>, (uint32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, uint16_t>, (uint32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint16_t, uint8_t>, (uint32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, double>, (uint32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, float>, (uint32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, int64_t>, (uint32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, int32_t>, (uint32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, int16_t>, (uint32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, int8_t>, (uint32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, uint64_t>, (uint32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, uint32_t>, (uint32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, uint16_t>, (uint32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint32_t, uint8_t, uint8_t>, (uint32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, double>, (uint16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, float>, (uint16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, int64_t>, (uint16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, int32_t>, (uint16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, int16_t>, (uint16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, int8_t>, (uint16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, uint64_t>, (uint16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, uint32_t>, (uint16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, uint16_t>, (uint16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, double, uint8_t>, (uint16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, double>, (uint16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, float>, (uint16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, int64_t>, (uint16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, int32_t>, (uint16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, int16_t>, (uint16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, int8_t>, (uint16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, uint64_t>, (uint16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, uint32_t>, (uint16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, uint16_t>, (uint16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, float, uint8_t>, (uint16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, double>, (uint16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, float>, (uint16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, int64_t>, (uint16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, int32_t>, (uint16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, int16_t>, (uint16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, int8_t>, (uint16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, uint64_t>, (uint16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, uint32_t>, (uint16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, uint16_t>, (uint16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int64_t, uint8_t>, (uint16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, double>, (uint16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, float>, (uint16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, int64_t>, (uint16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, int32_t>, (uint16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, int16_t>, (uint16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, int8_t>, (uint16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, uint64_t>, (uint16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, uint32_t>, (uint16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, uint16_t>, (uint16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int32_t, uint8_t>, (uint16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, double>, (uint16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, float>, (uint16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, int64_t>, (uint16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, int32_t>, (uint16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, int16_t>, (uint16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, int8_t>, (uint16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, uint64_t>, (uint16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, uint32_t>, (uint16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, uint16_t>, (uint16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int16_t, uint8_t>, (uint16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, double>, (uint16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, float>, (uint16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, int64_t>, (uint16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, int32_t>, (uint16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, int16_t>, (uint16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, int8_t>, (uint16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, uint64_t>, (uint16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, uint32_t>, (uint16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, uint16_t>, (uint16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, int8_t, uint8_t>, (uint16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, double>, (uint16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, float>, (uint16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, int64_t>, (uint16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, int32_t>, (uint16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, int16_t>, (uint16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, int8_t>, (uint16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, uint64_t>, (uint16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, uint32_t>, (uint16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, uint16_t>, (uint16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint64_t, uint8_t>, (uint16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, double>, (uint16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, float>, (uint16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, int64_t>, (uint16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, int32_t>, (uint16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, int16_t>, (uint16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, int8_t>, (uint16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, uint64_t>, (uint16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, uint32_t>, (uint16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, uint16_t>, (uint16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint32_t, uint8_t>, (uint16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, double>, (uint16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, float>, (uint16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, int64_t>, (uint16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, int32_t>, (uint16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, int16_t>, (uint16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, int8_t>, (uint16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, uint64_t>, (uint16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, uint32_t>, (uint16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, uint16_t>, (uint16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint16_t, uint8_t>, (uint16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, double>, (uint16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, float>, (uint16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, int64_t>, (uint16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, int32_t>, (uint16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, int16_t>, (uint16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, int8_t>, (uint16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, uint64_t>, (uint16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, uint32_t>, (uint16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, uint16_t>, (uint16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint16_t, uint8_t, uint8_t>, (uint16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, double>, (uint8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, float>, (uint8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, int64_t>, (uint8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, int32_t>, (uint8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, int16_t>, (uint8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, int8_t>, (uint8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, uint64_t>, (uint8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, uint32_t>, (uint8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, uint16_t>, (uint8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, double, uint8_t>, (uint8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, double>, (uint8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, float>, (uint8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, int64_t>, (uint8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, int32_t>, (uint8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, int16_t>, (uint8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, int8_t>, (uint8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, uint64_t>, (uint8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, uint32_t>, (uint8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, uint16_t>, (uint8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, float, uint8_t>, (uint8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, double>, (uint8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, float>, (uint8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, int64_t>, (uint8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, int32_t>, (uint8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, int16_t>, (uint8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, int8_t>, (uint8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, uint64_t>, (uint8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, uint32_t>, (uint8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, uint16_t>, (uint8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int64_t, uint8_t>, (uint8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, double>, (uint8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, float>, (uint8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, int64_t>, (uint8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, int32_t>, (uint8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, int16_t>, (uint8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, int8_t>, (uint8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, uint64_t>, (uint8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, uint32_t>, (uint8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, uint16_t>, (uint8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int32_t, uint8_t>, (uint8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, double>, (uint8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, float>, (uint8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, int64_t>, (uint8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, int32_t>, (uint8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, int16_t>, (uint8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, int8_t>, (uint8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, uint64_t>, (uint8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, uint32_t>, (uint8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, uint16_t>, (uint8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int16_t, uint8_t>, (uint8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, double>, (uint8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, float>, (uint8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, int64_t>, (uint8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, int32_t>, (uint8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, int16_t>, (uint8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, int8_t>, (uint8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, uint64_t>, (uint8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, uint32_t>, (uint8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, uint16_t>, (uint8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, int8_t, uint8_t>, (uint8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, double>, (uint8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, float>, (uint8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, int64_t>, (uint8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, int32_t>, (uint8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, int16_t>, (uint8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, int8_t>, (uint8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, uint64_t>, (uint8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, uint32_t>, (uint8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, uint16_t>, (uint8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint64_t, uint8_t>, (uint8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, double>, (uint8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, float>, (uint8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, int64_t>, (uint8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, int32_t>, (uint8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, int16_t>, (uint8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, int8_t>, (uint8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, uint64_t>, (uint8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, uint32_t>, (uint8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, uint16_t>, (uint8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint32_t, uint8_t>, (uint8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, double>, (uint8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, float>, (uint8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, int64_t>, (uint8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, int32_t>, (uint8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, int16_t>, (uint8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, int8_t>, (uint8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, uint64_t>, (uint8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, uint32_t>, (uint8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, uint16_t>, (uint8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint16_t, uint8_t>, (uint8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, double>, (uint8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, float>, (uint8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, int64_t>, (uint8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, int32_t>, (uint8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, int16_t>, (uint8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, int8_t>, (uint8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, uint64_t>, (uint8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, uint32_t>, (uint8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, uint16_t>, (uint8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaMul2_u8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, mul2<uint8_t, uint8_t, uint8_t>, (uint8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, double>, (double*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, float>, (double*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, int64_t>, (double*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, int32_t>, (double*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, int16_t>, (double*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, int8_t>, (double*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, uint64_t>, (double*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, uint32_t>, (double*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, uint16_t>, (double*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, double, uint8_t>, (double*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, double>, (double*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, float>, (double*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, int64_t>, (double*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, int32_t>, (double*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, int16_t>, (double*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, int8_t>, (double*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, uint64_t>, (double*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, uint32_t>, (double*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, uint16_t>, (double*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, float, uint8_t>, (double*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, double>, (double*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, float>, (double*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, int64_t>, (double*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, int32_t>, (double*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, int16_t>, (double*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, int8_t>, (double*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, uint64_t>, (double*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, uint32_t>, (double*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, uint16_t>, (double*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int64_t, uint8_t>, (double*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, double>, (double*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, float>, (double*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, int64_t>, (double*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, int32_t>, (double*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, int16_t>, (double*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, int8_t>, (double*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, uint64_t>, (double*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, uint32_t>, (double*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, uint16_t>, (double*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int32_t, uint8_t>, (double*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, double>, (double*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, float>, (double*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, int64_t>, (double*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, int32_t>, (double*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, int16_t>, (double*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, int8_t>, (double*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, uint64_t>, (double*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, uint32_t>, (double*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, uint16_t>, (double*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int16_t, uint8_t>, (double*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, double>, (double*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, float>, (double*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, int64_t>, (double*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, int32_t>, (double*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, int16_t>, (double*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, int8_t>, (double*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, uint64_t>, (double*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, uint32_t>, (double*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, uint16_t>, (double*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, int8_t, uint8_t>, (double*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, double>, (double*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, float>, (double*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, int64_t>, (double*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, int32_t>, (double*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, int16_t>, (double*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, int8_t>, (double*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, uint64_t>, (double*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, uint32_t>, (double*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, uint16_t>, (double*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint64_t, uint8_t>, (double*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, double>, (double*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, float>, (double*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, int64_t>, (double*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, int32_t>, (double*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, int16_t>, (double*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, int8_t>, (double*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, uint64_t>, (double*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, uint32_t>, (double*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, uint16_t>, (double*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint32_t, uint8_t>, (double*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, double>, (double*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, float>, (double*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, int64_t>, (double*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, int32_t>, (double*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, int16_t>, (double*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, int8_t>, (double*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, uint64_t>, (double*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, uint32_t>, (double*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, uint16_t>, (double*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint16_t, uint8_t>, (double*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, double>, (double*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, float>, (double*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, int64_t>, (double*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, int32_t>, (double*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, int16_t>, (double*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, int8_t>, (double*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, uint64_t>, (double*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, uint32_t>, (double*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, uint16_t>, (double*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<double, uint8_t, uint8_t>, (double*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, double>, (float*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, float>, (float*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, int64_t>, (float*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, int32_t>, (float*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, int16_t>, (float*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, int8_t>, (float*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, uint64_t>, (float*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, uint32_t>, (float*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, uint16_t>, (float*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, double, uint8_t>, (float*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, double>, (float*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, float>, (float*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, int64_t>, (float*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, int32_t>, (float*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, int16_t>, (float*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, int8_t>, (float*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, uint64_t>, (float*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, uint32_t>, (float*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, uint16_t>, (float*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, float, uint8_t>, (float*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, double>, (float*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, float>, (float*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, int64_t>, (float*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, int32_t>, (float*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, int16_t>, (float*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, int8_t>, (float*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, uint64_t>, (float*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, uint32_t>, (float*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, uint16_t>, (float*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int64_t, uint8_t>, (float*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, double>, (float*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, float>, (float*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, int64_t>, (float*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, int32_t>, (float*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, int16_t>, (float*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, int8_t>, (float*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, uint64_t>, (float*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, uint32_t>, (float*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, uint16_t>, (float*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int32_t, uint8_t>, (float*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, double>, (float*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, float>, (float*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, int64_t>, (float*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, int32_t>, (float*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, int16_t>, (float*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, int8_t>, (float*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, uint64_t>, (float*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, uint32_t>, (float*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, uint16_t>, (float*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int16_t, uint8_t>, (float*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, double>, (float*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, float>, (float*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, int64_t>, (float*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, int32_t>, (float*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, int16_t>, (float*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, int8_t>, (float*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, uint64_t>, (float*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, uint32_t>, (float*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, uint16_t>, (float*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, int8_t, uint8_t>, (float*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, double>, (float*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, float>, (float*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, int64_t>, (float*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, int32_t>, (float*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, int16_t>, (float*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, int8_t>, (float*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, uint64_t>, (float*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, uint32_t>, (float*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, uint16_t>, (float*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint64_t, uint8_t>, (float*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, double>, (float*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, float>, (float*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, int64_t>, (float*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, int32_t>, (float*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, int16_t>, (float*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, int8_t>, (float*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, uint64_t>, (float*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, uint32_t>, (float*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, uint16_t>, (float*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint32_t, uint8_t>, (float*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, double>, (float*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, float>, (float*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, int64_t>, (float*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, int32_t>, (float*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, int16_t>, (float*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, int8_t>, (float*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, uint64_t>, (float*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, uint32_t>, (float*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, uint16_t>, (float*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint16_t, uint8_t>, (float*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, double>, (float*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, float>, (float*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, int64_t>, (float*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, int32_t>, (float*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, int16_t>, (float*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, int8_t>, (float*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, uint64_t>, (float*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, uint32_t>, (float*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, uint16_t>, (float*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_f32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<float, uint8_t, uint8_t>, (float*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, double>, (int64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, float>, (int64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, int64_t>, (int64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, int32_t>, (int64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, int16_t>, (int64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, int8_t>, (int64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, uint64_t>, (int64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, uint32_t>, (int64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, uint16_t>, (int64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, double, uint8_t>, (int64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, double>, (int64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, float>, (int64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, int64_t>, (int64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, int32_t>, (int64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, int16_t>, (int64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, int8_t>, (int64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, uint64_t>, (int64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, uint32_t>, (int64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, uint16_t>, (int64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, float, uint8_t>, (int64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, double>, (int64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, float>, (int64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, int64_t>, (int64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, int32_t>, (int64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, int16_t>, (int64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, int8_t>, (int64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, uint64_t>, (int64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, uint32_t>, (int64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, uint16_t>, (int64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int64_t, uint8_t>, (int64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, double>, (int64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, float>, (int64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, int64_t>, (int64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, int32_t>, (int64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, int16_t>, (int64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, int8_t>, (int64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, uint64_t>, (int64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, uint32_t>, (int64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, uint16_t>, (int64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int32_t, uint8_t>, (int64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, double>, (int64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, float>, (int64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, int64_t>, (int64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, int32_t>, (int64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, int16_t>, (int64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, int8_t>, (int64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, uint64_t>, (int64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, uint32_t>, (int64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, uint16_t>, (int64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int16_t, uint8_t>, (int64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, double>, (int64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, float>, (int64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, int64_t>, (int64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, int32_t>, (int64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, int16_t>, (int64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, int8_t>, (int64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, uint64_t>, (int64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, uint32_t>, (int64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, uint16_t>, (int64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, int8_t, uint8_t>, (int64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, double>, (int64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, float>, (int64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, int64_t>, (int64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, int32_t>, (int64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, int16_t>, (int64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, int8_t>, (int64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, uint64_t>, (int64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, uint32_t>, (int64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, uint16_t>, (int64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint64_t, uint8_t>, (int64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, double>, (int64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, float>, (int64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, int64_t>, (int64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, int32_t>, (int64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, int16_t>, (int64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, int8_t>, (int64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, uint64_t>, (int64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, uint32_t>, (int64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, uint16_t>, (int64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint32_t, uint8_t>, (int64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, double>, (int64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, float>, (int64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, int64_t>, (int64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, int32_t>, (int64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, int16_t>, (int64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, int8_t>, (int64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, uint64_t>, (int64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, uint32_t>, (int64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, uint16_t>, (int64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint16_t, uint8_t>, (int64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, double>, (int64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, float>, (int64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, int64_t>, (int64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, int32_t>, (int64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, int16_t>, (int64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, int8_t>, (int64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, uint64_t>, (int64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, uint32_t>, (int64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, uint16_t>, (int64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int64_t, uint8_t, uint8_t>, (int64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, double>, (int32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, float>, (int32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, int64_t>, (int32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, int32_t>, (int32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, int16_t>, (int32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, int8_t>, (int32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, uint64_t>, (int32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, uint32_t>, (int32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, uint16_t>, (int32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, double, uint8_t>, (int32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, double>, (int32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, float>, (int32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, int64_t>, (int32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, int32_t>, (int32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, int16_t>, (int32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, int8_t>, (int32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, uint64_t>, (int32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, uint32_t>, (int32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, uint16_t>, (int32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, float, uint8_t>, (int32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, double>, (int32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, float>, (int32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, int64_t>, (int32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, int32_t>, (int32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, int16_t>, (int32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, int8_t>, (int32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, uint64_t>, (int32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, uint32_t>, (int32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, uint16_t>, (int32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int64_t, uint8_t>, (int32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, double>, (int32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, float>, (int32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, int64_t>, (int32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, int32_t>, (int32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, int16_t>, (int32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, int8_t>, (int32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, uint64_t>, (int32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, uint32_t>, (int32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, uint16_t>, (int32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int32_t, uint8_t>, (int32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, double>, (int32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, float>, (int32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, int64_t>, (int32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, int32_t>, (int32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, int16_t>, (int32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, int8_t>, (int32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, uint64_t>, (int32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, uint32_t>, (int32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, uint16_t>, (int32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int16_t, uint8_t>, (int32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, double>, (int32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, float>, (int32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, int64_t>, (int32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, int32_t>, (int32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, int16_t>, (int32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, int8_t>, (int32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, uint64_t>, (int32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, uint32_t>, (int32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, uint16_t>, (int32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, int8_t, uint8_t>, (int32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, double>, (int32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, float>, (int32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, int64_t>, (int32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, int32_t>, (int32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, int16_t>, (int32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, int8_t>, (int32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, uint64_t>, (int32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, uint32_t>, (int32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, uint16_t>, (int32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint64_t, uint8_t>, (int32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, double>, (int32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, float>, (int32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, int64_t>, (int32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, int32_t>, (int32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, int16_t>, (int32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, int8_t>, (int32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, uint64_t>, (int32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, uint32_t>, (int32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, uint16_t>, (int32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint32_t, uint8_t>, (int32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, double>, (int32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, float>, (int32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, int64_t>, (int32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, int32_t>, (int32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, int16_t>, (int32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, int8_t>, (int32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, uint64_t>, (int32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, uint32_t>, (int32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, uint16_t>, (int32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint16_t, uint8_t>, (int32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, double>, (int32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, float>, (int32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, int64_t>, (int32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, int32_t>, (int32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, int16_t>, (int32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, int8_t>, (int32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, uint64_t>, (int32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, uint32_t>, (int32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, uint16_t>, (int32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int32_t, uint8_t, uint8_t>, (int32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, double>, (int16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, float>, (int16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, int64_t>, (int16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, int32_t>, (int16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, int16_t>, (int16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, int8_t>, (int16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, uint64_t>, (int16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, uint32_t>, (int16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, uint16_t>, (int16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, double, uint8_t>, (int16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, double>, (int16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, float>, (int16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, int64_t>, (int16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, int32_t>, (int16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, int16_t>, (int16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, int8_t>, (int16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, uint64_t>, (int16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, uint32_t>, (int16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, uint16_t>, (int16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, float, uint8_t>, (int16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, double>, (int16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, float>, (int16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, int64_t>, (int16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, int32_t>, (int16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, int16_t>, (int16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, int8_t>, (int16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, uint64_t>, (int16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, uint32_t>, (int16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, uint16_t>, (int16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int64_t, uint8_t>, (int16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, double>, (int16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, float>, (int16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, int64_t>, (int16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, int32_t>, (int16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, int16_t>, (int16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, int8_t>, (int16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, uint64_t>, (int16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, uint32_t>, (int16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, uint16_t>, (int16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int32_t, uint8_t>, (int16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, double>, (int16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, float>, (int16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, int64_t>, (int16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, int32_t>, (int16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, int16_t>, (int16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, int8_t>, (int16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, uint64_t>, (int16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, uint32_t>, (int16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, uint16_t>, (int16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int16_t, uint8_t>, (int16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, double>, (int16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, float>, (int16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, int64_t>, (int16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, int32_t>, (int16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, int16_t>, (int16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, int8_t>, (int16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, uint64_t>, (int16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, uint32_t>, (int16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, uint16_t>, (int16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, int8_t, uint8_t>, (int16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, double>, (int16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, float>, (int16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, int64_t>, (int16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, int32_t>, (int16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, int16_t>, (int16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, int8_t>, (int16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, uint64_t>, (int16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, uint32_t>, (int16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, uint16_t>, (int16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint64_t, uint8_t>, (int16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, double>, (int16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, float>, (int16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, int64_t>, (int16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, int32_t>, (int16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, int16_t>, (int16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, int8_t>, (int16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, uint64_t>, (int16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, uint32_t>, (int16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, uint16_t>, (int16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint32_t, uint8_t>, (int16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, double>, (int16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, float>, (int16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, int64_t>, (int16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, int32_t>, (int16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, int16_t>, (int16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, int8_t>, (int16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, uint64_t>, (int16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, uint32_t>, (int16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, uint16_t>, (int16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint16_t, uint8_t>, (int16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, double>, (int16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, float>, (int16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, int64_t>, (int16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, int32_t>, (int16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, int16_t>, (int16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, int8_t>, (int16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, uint64_t>, (int16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, uint32_t>, (int16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, uint16_t>, (int16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int16_t, uint8_t, uint8_t>, (int16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, double>, (int8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, float>, (int8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, int64_t>, (int8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, int32_t>, (int8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, int16_t>, (int8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, int8_t>, (int8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, uint64_t>, (int8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, uint32_t>, (int8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, uint16_t>, (int8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, double, uint8_t>, (int8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, double>, (int8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, float>, (int8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, int64_t>, (int8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, int32_t>, (int8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, int16_t>, (int8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, int8_t>, (int8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, uint64_t>, (int8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, uint32_t>, (int8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, uint16_t>, (int8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, float, uint8_t>, (int8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, double>, (int8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, float>, (int8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, int64_t>, (int8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, int32_t>, (int8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, int16_t>, (int8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, int8_t>, (int8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, uint64_t>, (int8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, uint32_t>, (int8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, uint16_t>, (int8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int64_t, uint8_t>, (int8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, double>, (int8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, float>, (int8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, int64_t>, (int8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, int32_t>, (int8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, int16_t>, (int8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, int8_t>, (int8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, uint64_t>, (int8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, uint32_t>, (int8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, uint16_t>, (int8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int32_t, uint8_t>, (int8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, double>, (int8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, float>, (int8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, int64_t>, (int8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, int32_t>, (int8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, int16_t>, (int8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, int8_t>, (int8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, uint64_t>, (int8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, uint32_t>, (int8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, uint16_t>, (int8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int16_t, uint8_t>, (int8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, double>, (int8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, float>, (int8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, int64_t>, (int8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, int32_t>, (int8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, int16_t>, (int8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, int8_t>, (int8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, uint64_t>, (int8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, uint32_t>, (int8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, uint16_t>, (int8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, int8_t, uint8_t>, (int8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, double>, (int8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, float>, (int8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, int64_t>, (int8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, int32_t>, (int8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, int16_t>, (int8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, int8_t>, (int8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, uint64_t>, (int8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, uint32_t>, (int8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, uint16_t>, (int8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint64_t, uint8_t>, (int8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, double>, (int8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, float>, (int8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, int64_t>, (int8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, int32_t>, (int8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, int16_t>, (int8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, int8_t>, (int8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, uint64_t>, (int8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, uint32_t>, (int8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, uint16_t>, (int8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint32_t, uint8_t>, (int8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, double>, (int8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, float>, (int8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, int64_t>, (int8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, int32_t>, (int8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, int16_t>, (int8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, int8_t>, (int8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, uint64_t>, (int8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, uint32_t>, (int8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, uint16_t>, (int8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint16_t, uint8_t>, (int8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, double>, (int8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, float>, (int8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, int64_t>, (int8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, int32_t>, (int8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, int16_t>, (int8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, int8_t>, (int8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, uint64_t>, (int8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, uint32_t>, (int8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, uint16_t>, (int8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_i8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<int8_t, uint8_t, uint8_t>, (int8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, double>, (uint64_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, float>, (uint64_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, int64_t>, (uint64_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, int32_t>, (uint64_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, int16_t>, (uint64_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, int8_t>, (uint64_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, uint64_t>, (uint64_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, uint32_t>, (uint64_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, uint16_t>, (uint64_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, double, uint8_t>, (uint64_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, double>, (uint64_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, float>, (uint64_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, int64_t>, (uint64_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, int32_t>, (uint64_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, int16_t>, (uint64_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, int8_t>, (uint64_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, uint64_t>, (uint64_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, uint32_t>, (uint64_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, uint16_t>, (uint64_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, float, uint8_t>, (uint64_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, double>, (uint64_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, float>, (uint64_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, int64_t>, (uint64_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, int32_t>, (uint64_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, int16_t>, (uint64_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, int8_t>, (uint64_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, uint64_t>, (uint64_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, uint32_t>, (uint64_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, uint16_t>, (uint64_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int64_t, uint8_t>, (uint64_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, double>, (uint64_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, float>, (uint64_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, int64_t>, (uint64_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, int32_t>, (uint64_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, int16_t>, (uint64_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, int8_t>, (uint64_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, uint64_t>, (uint64_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, uint32_t>, (uint64_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, uint16_t>, (uint64_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int32_t, uint8_t>, (uint64_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, double>, (uint64_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, float>, (uint64_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, int64_t>, (uint64_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, int32_t>, (uint64_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, int16_t>, (uint64_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, int8_t>, (uint64_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, uint64_t>, (uint64_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, uint32_t>, (uint64_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, uint16_t>, (uint64_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int16_t, uint8_t>, (uint64_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, double>, (uint64_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, float>, (uint64_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, int64_t>, (uint64_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, int32_t>, (uint64_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, int16_t>, (uint64_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, int8_t>, (uint64_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, uint64_t>, (uint64_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, uint32_t>, (uint64_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, uint16_t>, (uint64_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, int8_t, uint8_t>, (uint64_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, double>, (uint64_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, float>, (uint64_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, int64_t>, (uint64_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, int32_t>, (uint64_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, int16_t>, (uint64_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, int8_t>, (uint64_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, uint64_t>, (uint64_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, uint32_t>, (uint64_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, uint16_t>, (uint64_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint64_t, uint8_t>, (uint64_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, double>, (uint64_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, float>, (uint64_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, int64_t>, (uint64_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, int32_t>, (uint64_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, int16_t>, (uint64_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, int8_t>, (uint64_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, uint64_t>, (uint64_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, uint32_t>, (uint64_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, uint16_t>, (uint64_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint32_t, uint8_t>, (uint64_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, double>, (uint64_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, float>, (uint64_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, int64_t>, (uint64_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, int32_t>, (uint64_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, int16_t>, (uint64_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, int8_t>, (uint64_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, uint64_t>, (uint64_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, uint32_t>, (uint64_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, uint16_t>, (uint64_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint16_t, uint8_t>, (uint64_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, double>, (uint64_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, float>, (uint64_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, int64_t>, (uint64_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, int32_t>, (uint64_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, int16_t>, (uint64_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, int8_t>, (uint64_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, uint64_t>, (uint64_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, uint32_t>, (uint64_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, uint16_t>, (uint64_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u64_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint64_t, uint8_t, uint8_t>, (uint64_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, double>, (uint32_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, float>, (uint32_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, int64_t>, (uint32_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, int32_t>, (uint32_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, int16_t>, (uint32_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, int8_t>, (uint32_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, uint64_t>, (uint32_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, uint32_t>, (uint32_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, uint16_t>, (uint32_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, double, uint8_t>, (uint32_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, double>, (uint32_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, float>, (uint32_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, int64_t>, (uint32_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, int32_t>, (uint32_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, int16_t>, (uint32_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, int8_t>, (uint32_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, uint64_t>, (uint32_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, uint32_t>, (uint32_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, uint16_t>, (uint32_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, float, uint8_t>, (uint32_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, double>, (uint32_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, float>, (uint32_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, int64_t>, (uint32_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, int32_t>, (uint32_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, int16_t>, (uint32_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, int8_t>, (uint32_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, uint64_t>, (uint32_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, uint32_t>, (uint32_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, uint16_t>, (uint32_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int64_t, uint8_t>, (uint32_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, double>, (uint32_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, float>, (uint32_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, int64_t>, (uint32_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, int32_t>, (uint32_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, int16_t>, (uint32_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, int8_t>, (uint32_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, uint64_t>, (uint32_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, uint32_t>, (uint32_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, uint16_t>, (uint32_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int32_t, uint8_t>, (uint32_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, double>, (uint32_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, float>, (uint32_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, int64_t>, (uint32_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, int32_t>, (uint32_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, int16_t>, (uint32_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, int8_t>, (uint32_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, uint64_t>, (uint32_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, uint32_t>, (uint32_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, uint16_t>, (uint32_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int16_t, uint8_t>, (uint32_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, double>, (uint32_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, float>, (uint32_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, int64_t>, (uint32_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, int32_t>, (uint32_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, int16_t>, (uint32_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, int8_t>, (uint32_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, uint64_t>, (uint32_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, uint32_t>, (uint32_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, uint16_t>, (uint32_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, int8_t, uint8_t>, (uint32_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, double>, (uint32_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, float>, (uint32_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, int64_t>, (uint32_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, int32_t>, (uint32_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, int16_t>, (uint32_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, int8_t>, (uint32_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, uint64_t>, (uint32_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, uint32_t>, (uint32_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, uint16_t>, (uint32_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint64_t, uint8_t>, (uint32_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, double>, (uint32_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, float>, (uint32_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, int64_t>, (uint32_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, int32_t>, (uint32_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, int16_t>, (uint32_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, int8_t>, (uint32_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, uint64_t>, (uint32_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, uint32_t>, (uint32_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, uint16_t>, (uint32_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint32_t, uint8_t>, (uint32_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, double>, (uint32_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, float>, (uint32_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, int64_t>, (uint32_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, int32_t>, (uint32_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, int16_t>, (uint32_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, int8_t>, (uint32_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, uint64_t>, (uint32_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, uint32_t>, (uint32_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, uint16_t>, (uint32_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint16_t, uint8_t>, (uint32_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, double>, (uint32_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, float>, (uint32_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, int64_t>, (uint32_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, int32_t>, (uint32_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, int16_t>, (uint32_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, int8_t>, (uint32_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, uint64_t>, (uint32_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, uint32_t>, (uint32_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, uint16_t>, (uint32_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u32_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint32_t, uint8_t, uint8_t>, (uint32_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, double>, (uint16_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, float>, (uint16_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, int64_t>, (uint16_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, int32_t>, (uint16_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, int16_t>, (uint16_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, int8_t>, (uint16_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, uint64_t>, (uint16_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, uint32_t>, (uint16_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, uint16_t>, (uint16_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, double, uint8_t>, (uint16_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, double>, (uint16_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, float>, (uint16_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, int64_t>, (uint16_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, int32_t>, (uint16_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, int16_t>, (uint16_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, int8_t>, (uint16_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, uint64_t>, (uint16_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, uint32_t>, (uint16_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, uint16_t>, (uint16_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, float, uint8_t>, (uint16_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, double>, (uint16_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, float>, (uint16_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, int64_t>, (uint16_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, int32_t>, (uint16_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, int16_t>, (uint16_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, int8_t>, (uint16_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, uint64_t>, (uint16_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, uint32_t>, (uint16_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, uint16_t>, (uint16_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int64_t, uint8_t>, (uint16_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, double>, (uint16_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, float>, (uint16_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, int64_t>, (uint16_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, int32_t>, (uint16_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, int16_t>, (uint16_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, int8_t>, (uint16_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, uint64_t>, (uint16_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, uint32_t>, (uint16_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, uint16_t>, (uint16_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int32_t, uint8_t>, (uint16_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, double>, (uint16_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, float>, (uint16_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, int64_t>, (uint16_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, int32_t>, (uint16_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, int16_t>, (uint16_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, int8_t>, (uint16_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, uint64_t>, (uint16_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, uint32_t>, (uint16_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, uint16_t>, (uint16_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int16_t, uint8_t>, (uint16_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, double>, (uint16_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, float>, (uint16_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, int64_t>, (uint16_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, int32_t>, (uint16_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, int16_t>, (uint16_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, int8_t>, (uint16_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, uint64_t>, (uint16_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, uint32_t>, (uint16_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, uint16_t>, (uint16_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, int8_t, uint8_t>, (uint16_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, double>, (uint16_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, float>, (uint16_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, int64_t>, (uint16_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, int32_t>, (uint16_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, int16_t>, (uint16_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, int8_t>, (uint16_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, uint64_t>, (uint16_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, uint32_t>, (uint16_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, uint16_t>, (uint16_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint64_t, uint8_t>, (uint16_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, double>, (uint16_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, float>, (uint16_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, int64_t>, (uint16_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, int32_t>, (uint16_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, int16_t>, (uint16_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, int8_t>, (uint16_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, uint64_t>, (uint16_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, uint32_t>, (uint16_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, uint16_t>, (uint16_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint32_t, uint8_t>, (uint16_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, double>, (uint16_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, float>, (uint16_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, int64_t>, (uint16_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, int32_t>, (uint16_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, int16_t>, (uint16_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, int8_t>, (uint16_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, uint64_t>, (uint16_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, uint32_t>, (uint16_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, uint16_t>, (uint16_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint16_t, uint8_t>, (uint16_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, double>, (uint16_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, float>, (uint16_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, int64_t>, (uint16_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, int32_t>, (uint16_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, int16_t>, (uint16_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, int8_t>, (uint16_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, uint64_t>, (uint16_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, uint32_t>, (uint16_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, uint16_t>, (uint16_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u16_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint16_t, uint8_t, uint8_t>, (uint16_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, double>, (uint8_t*)out, (double*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, float>, (uint8_t*)out, (double*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, int64_t>, (uint8_t*)out, (double*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, int32_t>, (uint8_t*)out, (double*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, int16_t>, (uint8_t*)out, (double*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, int8_t>, (uint8_t*)out, (double*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, uint64_t>, (uint8_t*)out, (double*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, uint32_t>, (uint8_t*)out, (double*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, uint16_t>, (uint8_t*)out, (double*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, double, uint8_t>, (uint8_t*)out, (double*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, double>, (uint8_t*)out, (float*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, float>, (uint8_t*)out, (float*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, int64_t>, (uint8_t*)out, (float*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, int32_t>, (uint8_t*)out, (float*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, int16_t>, (uint8_t*)out, (float*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, int8_t>, (uint8_t*)out, (float*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, uint64_t>, (uint8_t*)out, (float*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, uint32_t>, (uint8_t*)out, (float*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, uint16_t>, (uint8_t*)out, (float*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_f32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, float, uint8_t>, (uint8_t*)out, (float*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, double>, (uint8_t*)out, (int64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, float>, (uint8_t*)out, (int64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, int64_t>, (uint8_t*)out, (int64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, int32_t>, (uint8_t*)out, (int64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, int16_t>, (uint8_t*)out, (int64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, int8_t>, (uint8_t*)out, (int64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, uint64_t>, (uint8_t*)out, (int64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, uint32_t>, (uint8_t*)out, (int64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, uint16_t>, (uint8_t*)out, (int64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int64_t, uint8_t>, (uint8_t*)out, (int64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, double>, (uint8_t*)out, (int32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, float>, (uint8_t*)out, (int32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, int64_t>, (uint8_t*)out, (int32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, int32_t>, (uint8_t*)out, (int32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, int16_t>, (uint8_t*)out, (int32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, int8_t>, (uint8_t*)out, (int32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, uint64_t>, (uint8_t*)out, (int32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, uint32_t>, (uint8_t*)out, (int32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, uint16_t>, (uint8_t*)out, (int32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int32_t, uint8_t>, (uint8_t*)out, (int32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, double>, (uint8_t*)out, (int16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, float>, (uint8_t*)out, (int16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, int64_t>, (uint8_t*)out, (int16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, int32_t>, (uint8_t*)out, (int16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, int16_t>, (uint8_t*)out, (int16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, int8_t>, (uint8_t*)out, (int16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, uint64_t>, (uint8_t*)out, (int16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, uint32_t>, (uint8_t*)out, (int16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, uint16_t>, (uint8_t*)out, (int16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int16_t, uint8_t>, (uint8_t*)out, (int16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, double>, (uint8_t*)out, (int8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, float>, (uint8_t*)out, (int8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, int64_t>, (uint8_t*)out, (int8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, int32_t>, (uint8_t*)out, (int8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, int16_t>, (uint8_t*)out, (int8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, int8_t>, (uint8_t*)out, (int8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, uint64_t>, (uint8_t*)out, (int8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, uint32_t>, (uint8_t*)out, (int8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, uint16_t>, (uint8_t*)out, (int8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_i8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, int8_t, uint8_t>, (uint8_t*)out, (int8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, double>, (uint8_t*)out, (uint64_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, float>, (uint8_t*)out, (uint64_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, int64_t>, (uint8_t*)out, (uint64_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, int32_t>, (uint8_t*)out, (uint64_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, int16_t>, (uint8_t*)out, (uint64_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, int8_t>, (uint8_t*)out, (uint64_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, uint64_t>, (uint8_t*)out, (uint64_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, uint32_t>, (uint8_t*)out, (uint64_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, uint16_t>, (uint8_t*)out, (uint64_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u64_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint64_t, uint8_t>, (uint8_t*)out, (uint64_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, double>, (uint8_t*)out, (uint32_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, float>, (uint8_t*)out, (uint32_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, int64_t>, (uint8_t*)out, (uint32_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, int32_t>, (uint8_t*)out, (uint32_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, int16_t>, (uint8_t*)out, (uint32_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, int8_t>, (uint8_t*)out, (uint32_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, uint64_t>, (uint8_t*)out, (uint32_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, uint32_t>, (uint8_t*)out, (uint32_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, uint16_t>, (uint8_t*)out, (uint32_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u32_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint32_t, uint8_t>, (uint8_t*)out, (uint32_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, double>, (uint8_t*)out, (uint16_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, float>, (uint8_t*)out, (uint16_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, int64_t>, (uint8_t*)out, (uint16_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, int32_t>, (uint8_t*)out, (uint16_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, int16_t>, (uint8_t*)out, (uint16_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, int8_t>, (uint8_t*)out, (uint16_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, uint64_t>, (uint8_t*)out, (uint16_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, uint32_t>, (uint8_t*)out, (uint16_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, uint16_t>, (uint8_t*)out, (uint16_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u16_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint16_t, uint8_t>, (uint8_t*)out, (uint16_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_f64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, double>, (uint8_t*)out, (uint8_t*)in1, (double*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_f32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, float>, (uint8_t*)out, (uint8_t*)in1, (float*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_i64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, int64_t>, (uint8_t*)out, (uint8_t*)in1, (int64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_i32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, int32_t>, (uint8_t*)out, (uint8_t*)in1, (int32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_i16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, int16_t>, (uint8_t*)out, (uint8_t*)in1, (int16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_i8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, int8_t>, (uint8_t*)out, (uint8_t*)in1, (int8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_u64(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, uint64_t>, (uint8_t*)out, (uint8_t*)in1, (uint64_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_u32(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, uint32_t>, (uint8_t*)out, (uint8_t*)in1, (uint32_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_u16(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, uint16_t>, (uint8_t*)out, (uint8_t*)in1, (uint16_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaDiv2_u8_u8_u8(libtcCudaStream& stream, void* out, const void* in1, const void* in2, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, div2<uint8_t, uint8_t, uint8_t>, (uint8_t*)out, (uint8_t*)in1, (uint8_t*)in2, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, int64_t>, (double*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, int32_t>, (double*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, int16_t>, (double*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, int8_t>, (double*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, uint64_t>, (double*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, uint32_t>, (double*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, uint16_t>, (double*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f64_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<double, uint8_t>, (double*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, double>, (float*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, int64_t>, (float*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, int32_t>, (float*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, int16_t>, (float*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, int8_t>, (float*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, uint64_t>, (float*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, uint32_t>, (float*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, uint16_t>, (float*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_f32_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<float, uint8_t>, (float*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, double>, (int64_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, float>, (int64_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, int32_t>, (int64_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, int16_t>, (int64_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, int8_t>, (int64_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, uint64_t>, (int64_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, uint32_t>, (int64_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, uint16_t>, (int64_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i64_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int64_t, uint8_t>, (int64_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, double>, (int32_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, float>, (int32_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, int64_t>, (int32_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, int16_t>, (int32_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, int8_t>, (int32_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, uint64_t>, (int32_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, uint32_t>, (int32_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, uint16_t>, (int32_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i32_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int32_t, uint8_t>, (int32_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, double>, (int16_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, float>, (int16_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, int64_t>, (int16_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, int32_t>, (int16_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, int8_t>, (int16_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, uint64_t>, (int16_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, uint32_t>, (int16_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, uint16_t>, (int16_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i16_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int16_t, uint8_t>, (int16_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, double>, (int8_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, float>, (int8_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, int64_t>, (int8_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, int32_t>, (int8_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, int16_t>, (int8_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, uint64_t>, (int8_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, uint32_t>, (int8_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, uint16_t>, (int8_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_i8_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<int8_t, uint8_t>, (int8_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, double>, (uint64_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, float>, (uint64_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, int64_t>, (uint64_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, int32_t>, (uint64_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, int16_t>, (uint64_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, int8_t>, (uint64_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, uint32_t>, (uint64_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, uint16_t>, (uint64_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u64_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint64_t, uint8_t>, (uint64_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, double>, (uint32_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, float>, (uint32_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, int64_t>, (uint32_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, int32_t>, (uint32_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, int16_t>, (uint32_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, int8_t>, (uint32_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, uint64_t>, (uint32_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, uint16_t>, (uint32_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u32_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint32_t, uint8_t>, (uint32_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, double>, (uint16_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, float>, (uint16_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, int64_t>, (uint16_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, int32_t>, (uint16_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, int16_t>, (uint16_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, int8_t>, (uint16_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, uint64_t>, (uint16_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, uint32_t>, (uint16_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u16_u8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint16_t, uint8_t>, (uint16_t*)out, (uint8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_f64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, double>, (uint8_t*)out, (double*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_f32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, float>, (uint8_t*)out, (float*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_i64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, int64_t>, (uint8_t*)out, (int64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_i32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, int32_t>, (uint8_t*)out, (int32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_i16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, int16_t>, (uint8_t*)out, (int16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_i8(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, int8_t>, (uint8_t*)out, (int8_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_u64(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, uint64_t>, (uint8_t*)out, (uint64_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_u32(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, uint32_t>, (uint8_t*)out, (uint32_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


const char* libtcCudaCast_u8_u16(libtcCudaStream& stream, void* out, const void* inp, uint64_t n) {
  cudaLaunchConfig_t config{};
  auto serr = setupElementwiseKernel(stream, n, config);
  if (serr != nullptr) {
    return serr;
  }

  auto err = cudaLaunchKernelEx(&config, cast<uint8_t, uint16_t>, (uint8_t*)out, (uint16_t*)inp, n);
  if (err != cudaSuccess) {
    return cudaGetErrorString(err);
  }
  return nullptr;
}


#ifdef __cplusplus
}
#endif
